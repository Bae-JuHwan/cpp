//-----------------------------------------------------------------------------
// 2023. 2학기 C++  9월 6일								월910수78	  (1주 2일)
//-----------------------------------------------------------------------------
//내용
//강의소개
//컴파일 환경 통일 - Release/x64, C++ 버전 - 최신, 컴파일러 버전 17.7.3
//한 학기 강의를 save 할 수 있는 코딩
// - 프로젝트 속성 - C/C++ - SDL 검사 - 아니요 선택
// - save 기능을 다른 파일로 분리
//-----------------------------------------------------------------------------
//과제 - 오늘 강의에 나온 모든 내용을 여기저기서 찾아보기 - 친구와 대화가 좋음
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"

int main()
{
	save("소스.cpp");
}

//-----------------------------------------------------------------------------
// save.cpp - 한 학기 강의 소스를 저장할 수 있는 함수를 정의한다
//
// 2023. 9. 6
//-----------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <filesystem>

void save(const std::string & fileName)
{
   std::ifstream in{fileName};
   std::ofstream out{ "2023 2학기 C++ 월910 수78 강의저장.txt" , std::ios::app };

   auto now = std::chrono::system_clock::now();			  //현재 시간을 가져옴
   auto utc = std::chrono::system_clock::to_time_t(now);  //UTC로 변환
   auto lt = std::localtime(&utc);						  //지역시간으로 변환
   auto old = out.imbue(std::locale("ko_KR"));			  //출력스트림 지역변경

   out << '\n' << '\n';
   out << "===================================================" << '\n';
   out << "저장한 시간: " << std::put_time(lt, "%x %A %X") << '\n';
   out << "===================================================" << '\n';
   out << '\n';
   out.imbue(old);

char c;
in >> std::noskipws;
while (in >> c)
out << c;
}

===================================================
저장한 시간: 2023-09-06 수요일 오후 4:51:18
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  9월 6일								월910수78	  (1주 2일)
//-----------------------------------------------------------------------------
//내용
//강의소개
//컴파일 환경 통일 - Release/x64, C++ 버전 - 최신, 컴파일러 버전 17.7.3
//한 학기 강의를 save 할 수 있는 코딩
// - 프로젝트 속성 - C/C++ - SDL 검사 - 아니요 선택
// - save 기능을 다른 파일로 분리
//-----------------------------------------------------------------------------
//과제 - 오늘 강의에 나온 모든 내용을 여기저기서 찾아보기 - 친구와 대화가 좋음
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"

int main()
{
	save("save.h");
	save("save.cpp");
	save("소스.cpp");
}

===================================================
저장한 시간: 2023-09-11 월요일 오후 5:44:47
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  9월 11일							월910수78	  (1주 2일)
//-----------------------------------------------------------------------------
//C++ 입출력 - C++20 기준
//-----------------------------------------------------------------------------
//과제 - C++ I/O 관련 내용 읽어보기
//-----------------------------------------------------------------------------
#include <iostream>
#include <string>
#include <format>			//c++20 출력문을 정렬하려면.....
#include "save.h"

int main()					// cin, cout, cerr, clog
{
	//화면에 구구단 2단부터 9단까지 출력하세요.

	for (int j = 2; j <= 9; ++j) {
		for (int i = 1; i <= 9; ++i) {
			std::cout << j << " x " << i << " = " << 
				std::format( "{:>60d}", j * i ) << '\n';		//>오른쪽 정렬, <왼쪽 정렬, ^가운데 정렬
		}
		std::cout << '\n';
	}
	save("소스.cpp");

===================================================
저장한 시간: 2023-09-11 월요일 오후 6:05:14
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  9월 11일							월910수78	  (1주 2일)
//-----------------------------------------------------------------------------
//C++ 입출력 - C++20 기준
//-----------------------------------------------------------------------------
//과제 - C++ I/O 관련 내용 읽어보기
//-----------------------------------------------------------------------------
#include <iostream>
#include <string>
#include "save.h"

int main()				
{
	//[문제] int값 2개를 입력받아 합계를 출력하라.
	std::cout << "숫자 2개를 알려주면 합계를 출력하겠습니다" << '\n';
	std::cout << "더할 숫자 2개를 입력하세요";

	int num1, num2;
	std::cin >> num1 >> num2;

	std::cout << "합계는 : " << num1 + num2 << '\n';

	save("소스.cpp");
}		// 디버깅 할때 띄어쓰기 하면 다음 숫자로 인식하고 그 뒤에 것들은 남아있음.

===================================================
저장한 시간: 2023-09-11 월요일 오후 6:29:06
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  9월 11일							월910수78	  (2주 1일)
//-----------------------------------------------------------------------------
// int n ;
//-----------------------------------------------------------------------------
//과제 - 다른 자료형에 대하여 오늘 강의한 내용을 반복
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;			// 이렇게 하면 안되는 이유를 알고 쓰자.

int main()				
{
	int n;			// int 만큼 메모리를 주세요. 나는 n이라는 이름으로 acess

	cout << "n의 크기는    - " << sizeof n << '\n';
	cout << "n의 주소는    - " << addressof(n) << '\n';
	cout << "n의 자료형은  - " << typeid(n).name() << '\n';
	
	save("소스.cpp");
}		

===================================================
저장한 시간: 2023-09-11 월요일 오후 6:30:40
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  9월 11일							월910수78	  (2주 1일)
//-----------------------------------------------------------------------------
// int n ;
//-----------------------------------------------------------------------------
//과제 - 다른 자료형에 대하여 오늘 강의한 내용을 반복
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;			// 이렇게 하면 안되는 이유를 알고 쓰자.

int main()				
{
	string n;			// int 만큼 메모리를 주세요. 나는 n이라는 이름으로 access

	cout << "n의 크기는    - " << sizeof n << '\n';
	cout << "n의 주소는    - " << addressof(n) << '\n';
	cout << "n의 자료형은  - " << typeid(n).name() << '\n';
	
	save("소스.cpp");
}		

===================================================
저장한 시간: 2023-09-11 월요일 오후 6:41:28
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  9월 11일							월910수78	  (2주 1일)
//-----------------------------------------------------------------------------
// int n ;
//-----------------------------------------------------------------------------
//과제 - 다른 자료형에 대하여 오늘 강의한 내용을 반복
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;			// 이렇게 하면 안되는 이유를 알고 쓰자.

int main()				
{
	int n = 0B01111111'11111111'11111111'11111111;

	// [문제] n의 최댓값을 출력하라.
	cout << n << '\n';

	save("소스.cpp");
}		

===================================================
저장한 시간: 2023-09-11 월요일 오후 6:50:23
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  9월 11일							월910수78	  (2주 1일)
//-----------------------------------------------------------------------------
// int n ;
//-----------------------------------------------------------------------------
//과제 - 다른 자료형에 대하여 오늘 강의한 내용을 반복
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;			// 이렇게 하면 안되는 이유를 알고 쓰자.

int main()				
{
	int n = 0x7FFFFFFF;
	
	n = n + 1;
	// [문제] n의 최댓값을 출력하라.
	cout << n << '\n';

	save("소스.cpp");
}		

===================================================
저장한 시간: 2023-09-11 월요일 오후 6:54:30
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  9월 11일							월910수78	  (2주 1일)
//-----------------------------------------------------------------------------
// int n ;
//-----------------------------------------------------------------------------
//과제 - 다른 자료형에 대하여 오늘 강의한 내용을 반복
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

int main()				
{
	int n = numeric_limits<int>::max();
	
	// [문제] n의 최댓값을 출력하라.
	cout << n << '\n';

	save("소스.cpp");
}		

===================================================
저장한 시간: 2023-09-13 수요일 오후 4:00:05
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  9월 13일							월910수78	  (2주 2일)
// 다음 주 수요일 9/20일 - 전시로 수업(3주 2일)을 대체함.
//-----------------------------------------------------------------------------
// int n ;
//-----------------------------------------------------------------------------
//과제 - 다른 자료형에 대하여 오늘 강의한 내용을 반복
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;			// 이렇게 하면 안되는 이유를 알고 쓰자.
//----------
int main()			
//----------
{	
	int n[10];			// 이 작명법을 주의, 함수포인터는 이렇게 적음

	cout << " n의 크기 - " << sizeof(n) << '\n';
	cout << " n의 주소 - " << addressof(n) << '\n';
	cout << " n의 자료형 - " << typeid(n).name() << '\n';

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-09-13 수요일 오후 4:16:34
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  9월 13일							월910수78	  (2주 2일)
// 다음 주 수요일 9/20일 - 전시로 수업(3주 2일)을 대체함.
//-----------------------------------------------------------------------------
// int n ;
//-----------------------------------------------------------------------------
//과제 - 다른 자료형에 대하여 오늘 강의한 내용을 반복
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;			// 이렇게 하면 안되는 이유를 알고 쓰자.
//----------
int main()			
//---------- continuous 시간을 나타내는 단어, contiguous 한 칸을 나타내는 단어
{	
	int n[10];			

	// [문제] n에는 int값 10개가 있다. 화면에 출력하라.

	for (int i = 0; i <= 9; ++i) {
		cout << "n에 있는 int값 - " << n[i] << '\n';
	}

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-09-13 수요일 오후 4:25:04
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  9월 13일							월910수78	  (2주 2일)
// 다음 주 수요일 9/20일 - 전시로 수업(3주 2일)을 대체함.
//-----------------------------------------------------------------------------
// int n ;
//-----------------------------------------------------------------------------
//과제 - 다른 자료형에 대하여 오늘 강의한 내용을 반복
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;			// 이렇게 하면 안되는 이유를 알고 쓰자.
//----------
int main()			
//---------- continuous 시간을 나타내는 단어, contiguous 한 칸을 나타내는 단어
{	
	int n[10]{ };

	for ( int num : n ) {			// range-based for, range-for loop
		cout << "n에 있는 int값 - " << num << '\n';
	}

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-09-13 수요일 오후 4:37:26
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  9월 13일							월910수78	  (2주 2일)
// 다음 주 수요일 9/20일 - 전시로 수업(3주 2일)을 대체함.
//-----------------------------------------------------------------------------
// int n ;
//-----------------------------------------------------------------------------
//과제 - 다른 자료형에 대하여 오늘 강의한 내용을 반복
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;			// 이렇게 하면 안되는 이유를 알고 쓰자.
//----------
int main()			
//---------- continuous 시간을 나타내는 단어, contiguous 한 칸을 나타내는 단어
{	
	int n[10]{1,2,3 };		// 일관된 초기화

	for ( int num : n ) {			// range-based for, range-for loop
		cout << "n에 있는 int값 - " << num << '\n';
	}
	save("소스.cpp");
}

===================================================
저장한 시간: 2023-09-13 수요일 오후 5:07:18
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  9월 13일							월910수78	  (2주 2일)
// 다음 주 수요일 9/20일 - 전시로 수업(3주 2일)을 대체함.
//-----------------------------------------------------------------------------
// 랜덤 엔진과 분포
//-----------------------------------------------------------------------------
//과제 - 알아서 잘 복습하자
//-----------------------------------------------------------------------------
#include <iostream>
#include <random>		// 랜덤값과 분포를 사용하려면...
#include <format>
#include "save.h"
using namespace std;	// 이렇게 하면 안되는 이유를 알고 쓰자.

default_random_engine dre;			// 랜덤값을 생성하는 엔진
uniform_int_distribution uid{ 1 , 999 };
//----------
int main()			
//---------- 
{	
	int numbers[1000];

	for (int i = 0; i < 1000; ++i)
		numbers[i] = uid(dre);

	for (int number : numbers)
		cout << format("{:4d}", number);
	cout << '\n';

	// [문제] 제일 큰 값을 찾아 화면에 출력하시오.
	int max = numeric_limits<int>::min();
	for (int number : numbers) {
		if (max < number)
			max = number;
	}
	cout << "가장 큰 값은? " << max << '\n';

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-09-18 월요일 오후 5:51:06
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  9월 13일							월910수78	  (3주 1일)
// 이번 주 수요일 9/20일 - 전시로 수업(3주 2일)을 대체함.
//-----------------------------------------------------------------------------
// 랜덤 엔진과 분포
//-----------------------------------------------------------------------------
// 과제 - 알아서 잘 복습하자
//-----------------------------------------------------------------------------
#include <iostream>
#include <random>		// 랜덤값과 분포를 사용하려면...
#include <format>
#include "save.h"
using namespace std;	// 이렇게 하면 안되는 이유를 알고 쓰자.

default_random_engine dre;			// 랜덤값을 생성하는 엔진
uniform_int_distribution<int> uid{ 1 , 999 };
//----------
int main()			
//---------- 
{	
	int numbers[1000];

	for (int i = 0; i < 1000; ++i)
		numbers[i] = uid(dre);

	for (int number : numbers)
		cout << format("{:4d}", number);
	cout << '\n';

	// [문제] 원하는 수를 하나 입력받아라
	// 그 수가 numbers에 있는지 찾아 있는 지 없는 지 출력하라.
	
	cout << "찾을 숫자는? ";
	int 찾을숫자;
	cin >> 찾을숫자;

	bool flag{ false };
	for (int 천개중한개 : numbers) {
		if (찾을숫자 == 천개중한개) {
			flag = true;
			cout << "찾았다" << '\n';
			break;
		}
	}
	if (! flag)
		cout << "없습니다" << '\n';

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-09-18 월요일 오후 6:52:27
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  9월 13일							월910수78	  (3주 1일)
// 이번 주 수요일 9/20일 - 전시로 수업(3주 2일)을 대체함.
//-----------------------------------------------------------------------------
// 많은 수의 int가 있다 - 어떻게 저장할건가? 어떤 작업을 하고 싶나?
//-----------------------------------------------------------------------------
// 과제 - 알아서 잘 복습하자
//-----------------------------------------------------------------------------
#include <iostream>
#include <random>		// 랜덤값과 분포를 사용하려면...
#include <format>
#include "save.h"
using namespace std;	// 이렇게 하면 안되는 이유를 알고 쓰자.
default_random_engine dre;			// 랜덤값을 생성하는 엔진
uniform_int_distribution<int> uid{ 1 , 6 };

// [문제] 주사위를 1'0000 번 던졌다. 각 숫자의 출현 횟수와 확률을 출력하라.
// 1 - 1670번, 확률 - 16.7%
// 2
// ..
// 6

//----------
int main()			
//---------- 
{	
	int num[6]{ };
	for (int i = 0; i < 10000; ++i) 
		num[uid(dre) - 1]++;

		// 1 - 1670번, 확률 - 16.7%
		for (int i = 0; i < 6; ++i)
			cout << i + 1 << " - " << num[i] << "번 확률 - "
			<< format("{:2.1f}", num[i] / 100.) << "%"  << '\n';
	
	save("소스.cpp");
}

===================================================
저장한 시간: 2023-09-18 월요일 오후 6:59:29
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  9월 13일							월910수78	  (3주 1일)
// 이번 주 수요일 9/20일 - 전시로 수업(3주 2일)을 대체함.
//-----------------------------------------------------------------------------
// 변수와 메모리 - 전역변수, 지역변수, 동적할당변수
//-----------------------------------------------------------------------------
// 과제 - STACK, DATA, CODE, Free Store
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;	// 이렇게 하면 안되는 이유를 알고 쓰자.

int n;		// 밑의 int n; 과 다름.

//----------
int main()			
//----------
{	
	int n;
	cout << ::n << '\n';			// ::를 쓰면 전역변수(위의 int n;)의 값이 적힘, 그냥 n이라고 쓰면 int main 안의 (int n;)의 값이 적힘.

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-09-25 월요일 오후 5:41:06
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  9월 25일							월910수78	  (4주 1일)
//-----------------------------------------------------------------------------
// 10월 2일 (5주 1일) - 동영상 강의
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// 변수와 메모리 - 전역변수, 지역변수, 동적할당변수
//-----------------------------------------------------------------------------
// 과제 - STACK, DATA, CODE, Free Store
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;	// 이렇게 하면 안되는 이유를 알고 쓰자.

int n = 123;		// 밑의 int n; 과 다름.  
					// int n; 'int'는  data type, 'n'은 variable
					// sizeof(int)는 STACK(local), DATA(global), Free Store(dynamic allocation)에서 나타남.

//----------
int main()			
//---------- 
{	
	int n = 456;

	{ int nnn = 111;  }				// STACK

	{
		{
			int xxx;
		}
	}
	cout << ::n << '\n';			// ::를 쓰면 전역변수(위의 int n;)의 값이 적힘, 그냥 n이라고 쓰면 int main 안의 (int n;)의 값이 적힘.

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-09-25 월요일 오후 5:45:18
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  9월 25일							월910수78	  (4주 1일)
//-----------------------------------------------------------------------------
// 10월 2일 (5주 1일) - 동영상 강의
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// 변수와 메모리 - 전역변수, 지역변수, 동적할당변수
//-----------------------------------------------------------------------------
// 과제 - STACK, DATA, CODE, Free Store
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;	// 이렇게 하면 안되는 이유를 알고 쓰자.

int gn;	

//----------
int main()			
//---------- 
{	
	int n;

	cout << "전역변수 - " << gn << '\n';
	cout << "지역변수 - " << n << '\n';

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-09-25 월요일 오후 5:50:07
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  9월 25일							월910수78	  (4주 1일)
//-----------------------------------------------------------------------------
// 10월 2일 (5주 1일) - 동영상 강의
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// 변수와 메모리 - 전역변수, 지역변수, 동적할당변수
//-----------------------------------------------------------------------------
// 과제 - STACK, DATA, CODE, Free Store
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;	// 이렇게 하면 안되는 이유를 알고 쓰자.

int gn1;
int gn2;

//----------
int main()			
//---------- 
{	
	int n1;
	int n2;
	cout << "gn1의 주소 : " << addressof(gn1) << '\n';
	cout << "gn2의 주소 : " << addressof(gn2) << '\n';
	cout << "n1의 주소 : " << addressof(n1) << '\n';
	cout << "n2의 주소 : " << addressof(n2) << '\n';

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-09-25 월요일 오후 6:08:57
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  9월 25일							월910수78	  (4주 1일)
//-----------------------------------------------------------------------------
// 10월 2일 (5주 1일) - 동영상 강의
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// 변수와 메모리 - 전역변수, 지역변수, 동적할당변수
//-----------------------------------------------------------------------------
// 과제 - STACK, DATA, CODE, Free Store
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;	// 이렇게 하면 안되는 이유를 알고 쓰자.

int gn1;
int gn2;

//----------
int main()			
//---------- 
{	
	// STACK의 크기를 알아보면?
	int num [250000];		// 숫자x4 바이트임.

	cout << num[250000] << '\n';		// int num에 들어갈 수 있는 최대의 값을 찾기
	cout << addressof(num[250000]) << '\n';

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-09-25 월요일 오후 6:24:34
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  9월 25일							월910수78	  (4주 1일)
//-----------------------------------------------------------------------------
// 10월 2일 (5주 1일) - 동영상 강의
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// 변수와 메모리 - 전역변수, 지역변수, 동적할당변수
//-----------------------------------------------------------------------------
// 과제 - STACK, DATA, CODE, Free Store
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;	// 이렇게 하면 안되는 이유를 알고 쓰자.

int gn1;
int gn2;

//----------
int main()
//---------- 
{	
	// const int NUM = (숫자); 이렇게 쓰면 한번에 쓸 수 있음(숫자 대신 NUM이라고 쓰기).

	
	int num [250000];			// LIFO -> last in first out , STACK -> 함수 인자 전달, 함수 호출시 cpu 현 상태 저장

	cout << num[250000] << '\n';		
	cout << addressof(num[250000]) << '\n';

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-09-25 월요일 오후 7:00:47
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  9월 25일							월910수78	  (4주 1일)
//-----------------------------------------------------------------------------
// 10월 2일 (5주 1일) - 동영상 강의
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// 변수와 메모리 - 전역변수, 지역변수, 동적할당변수
//-----------------------------------------------------------------------------
// 과제 - STACK, DATA, CODE, Free Store
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;	// 이렇게 하면 안되는 이유를 알고 쓰자.

int gn;

//----------
int main()			
//---------- 
{	
	int n;

	int* p = new int;

	// 각 int는 살고 있는 곳이 다르다.

	cout << addressof(gn) << '\n';
	cout << addressof(n) << '\n';
	cout << p << '\n';
	 
	save("소스.cpp");
}

===================================================
저장한 시간: 2023-09-27 수요일 오후 3:45:51
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  9월 27일							월910수78	  (4주 2일)
//-----------------------------------------------------------------------------
// 10월 2일 (5주 1일) - 동영상 강의
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// change 함수
//-----------------------------------------------------------------------------
// 과제 - 정렬
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"

using namespace std;	// 이렇게 하면 안되는 이유를 알고 쓰자.

//----------
int main()
//----------
{
	int a{ 1 }, b{ 2 };

	// 여기서 a와 b의 값을 서로 바꾸는 코딩을 한다. 원하는 출력값이 예시와 같이 나오도록.
	
	int temp{ a };
	a = b;
	b = temp;
	cout << a << " , " << b << '\n';		// 예시) 2, 1
		
	save("소스.cpp");
}

===================================================
저장한 시간: 2023-09-27 수요일 오후 3:59:08
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  9월 27일							월910수78	  (4주 2일)
//-----------------------------------------------------------------------------
// 10월 2일 (5주 1일) - 동영상 강의
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// change 함수
//-----------------------------------------------------------------------------
// 과제 - 정렬
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"

using namespace std;	// 이렇게 하면 안되는 이유를 알고 쓰자.

void change(int* p, int* q)
{
	int temp{ *p };
	*p = *q;
	*q = temp;
}

//----------
int main()
//----------
{
	int a{1}, b{2};

	// 여기서 함수 change를 호출하여 a와 b의 값을 서로 바꾼다
	// 원하는 출력값이 예시와 같이 나오도록.
	// 함수 change를 선언하고 정의한 후 호출하라.

	void change(int*, int*);			// function declaration - 선언
	change(&a, &b);						// function call - 호출

	cout << a << " , " << b << '\n';		// 예시) 2, 1
	
	save("소스.cpp");
}

===================================================
저장한 시간: 2023-09-27 수요일 오후 4:09:18
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  9월 27일							월910수78	  (4주 2일)
//-----------------------------------------------------------------------------
// 10월 2일 (5주 1일) - 동영상 강의
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// change 함수
//-----------------------------------------------------------------------------
// 과제 - 정렬
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"

using namespace std;	// 이렇게 하면 안되는 이유를 알고 쓰자.

void change(int*, int*);			// function declaration - 선언

//----------
int main()
//----------
{
	int a{1}, b{2};

	// 여기서 함수 change를 호출하여 a와 b의 값을 서로 바꾼다.
	// 원하는 출력값이 예시와 같이 나오도록.
	// 함수 change를 선언하고 정의한 후 호출하라.

	
	change(&a, &b);						// function call - 호출

	cout << a << " , " << b << '\n';		// 예시) 2, 1
	
	save("소스.cpp");
}

void change(int* p, int* q)				// int *p 와 int *q는 STACK이고 크기는 8비트
{
	int temp{ *p };
	*p = *q;
	*q = temp;
}

===================================================
저장한 시간: 2023-09-27 수요일 오후 4:15:21
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  9월 27일							월910수78	  (4주 2일)
//-----------------------------------------------------------------------------
// 10월 2일 (5주 1일) - 동영상 강의
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// change 함수
//-----------------------------------------------------------------------------
// 과제 - 정렬
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"

using namespace std;	// 이렇게 하면 안되는 이유를 알고 쓰자.

void change(int*, int*);			// function declaration - 선언

//----------
int main()
//----------
{
	int num = 100;

	int* p = &num;		// 포인터는 다른 지역에 있는 거를 옮기기 위해 사용!
	*p = 333;

	cout << num << '\n';

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-09-27 수요일 오후 4:19:26
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  9월 27일							월910수78	  (4주 2일)
//-----------------------------------------------------------------------------
// 10월 2일 (5주 1일) - 동영상 강의
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// change 함수
//-----------------------------------------------------------------------------
// 과제 - 정렬
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"

using namespace std;	// 이렇게 하면 안되는 이유를 알고 쓰자.

void change(int*, int*);			// function declaration - 선언

//----------
int main()
//----------
{
	int num = 100;

	int& r = num;		// &(reference)는 '='이 필요함.
	r = 333;

	cout << num << '\n';

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-09-27 수요일 오후 4:44:04
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  9월 27일							월910수78	  (4주 2일)
//-----------------------------------------------------------------------------
// 10월 2일 (5주 1일) - 동영상 강의
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// change 함수
//-----------------------------------------------------------------------------
// 과제 - 정렬
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"

using namespace std;	// 이렇게 하면 안되는 이유를 알고 쓰자.

void change(int&, int&);		// call-by-reference   C++에서 change를 쓰는 방법
								// aliase
//----------
int main()					// 시험문제에 나올 문제) 위,아래의 선언을 안보여주고 int main안의 함수만 보여줬을 때 나올 값과 이유를 설명하기
//----------				// 할 수 있는 답 : 정보가 부족해서 답을 알 수 없다. 이유 : 어떤 함수가 선언되었는지 알 수 없기 때문이다.
{
	int a{ 1 }, b{ 2 };

	change(a, b);

	cout << a << " , " << b << '\n';

	save("소스.cpp");
}

void change(int& p, int& q)
{
	int temp{ p };
	p = q;
	q = temp;
}

===================================================
저장한 시간: 2023-10-02 월요일 오후 5:35:12
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 2일							월910수78	  (5주 1일)
//-----------------------------------------------------------------------------
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// change 함수
//-----------------------------------------------------------------------------
// 과제 - 정렬
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"

using namespace std;	

void change(int& , int&);		// 인티저 reference 라고 읽음.

//----------
int main()					
//----------				
{
	const int NUM = 10;

	int num[]{ 10, 3, 8, 6, 1, 5, 2, 7, 4, 9 };		// 컴퓨터가 자동으로 갯수를 세어주기 때문에 []안에 숫자를 안씀.

	// [문제] 배열 num에 있는 int값을 오름차순(acending order)으로 정렬(sort)하라.
	
	// bubble sort

	for (int j = 0; j < NUM - 1; ++j) {
		for (int i = 0; i < NUM - 1 -j; ++i) {
			if (num[i] > num[i+1])
				change(num[i], num[i+1]);	
		}	
	}
									// * , & 어디에 사용? 다른 메모리에 access 하기 위해 사용
	// 출력
	for (int num : num)
		cout << num << ' ';
	cout << '\n';
	save("소스.cpp");
}

void change(int& p, int& q)
{
	int temp{ p };
	p = q;
	q = temp;
}

===================================================
저장한 시간: 2023-10-04 수요일 오후 4:04:13
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 4일							월910수78	  (5주 2일)
//-----------------------------------------------------------------------------
// 10월 9일 (6주 1일) - 동영상
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// 정렬(sort) - C언어 라이브러리 함수 qsort
//-----------------------------------------------------------------------------
// 과제 - 정렬(sort)이란 무엇인가 알아보자
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include <random>
#include <format>
using namespace std;

// [문제] int값 여러개를 저장할 수 있는 배열을 만들어라.
// 각 int의 값을 1부터 999999까지 값 중 랜덤값으로 만들어라.
// 배열을 오름차순으로 정렬하라.
// 일부분을 출력해서 정렬된 것을 확인하라.

default_random_engine dre;
uniform_int_distribution uid(1, 999999);

//----------
int main()
//----------				
{
	const int NUM{200};

	int num[NUM];

	// &는 원래 데이터에 붙인 별명이므로 원본을 그대로 사용하고 싶을 때 쓴다.
	for (int& number : num)
		number = uid(dre);

	// 정렬 - qsort로 코딩
	int 정렬방법( const void*, const void* );
	qsort(num, NUM, sizeof(int), 정렬방법);
	
	// 정렬 후 출력
	for (int num : num)
		cout << format("{:8d}" , num);
	cout << '\n';

	save("소스.cpp");
}

int 정렬방법(const void* p, const void* q)
{
	return *(int*)(q) - *(int*)p;
}

===================================================
저장한 시간: 2023-10-04 수요일 오후 4:15:14
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 4일							월910수78	  (5주 2일)
//-----------------------------------------------------------------------------
// 10월 9일 (6주 1일) - 동영상
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// 정렬(sort) - C언어 라이브러리 함수 qsort
//-----------------------------------------------------------------------------
// 과제 - 정렬(sort)이란 무엇인가 알아보자
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include <random>
#include <format>
using namespace std;

// [문제] int값 여러개를 저장할 수 있는 배열을 만들어라.
// 각 int의 값을 1부터 999999까지 값 중 랜덤값으로 만들어라.
// 배열을 오름차순으로 정렬하라.
// 일부분을 출력해서 정렬된 것을 확인하라.

default_random_engine dre;
uniform_int_distribution uid(1, 999999);

int cnt{ };

//----------
int main()
//----------				
{
	const int NUM{200};
	
	int num[NUM];

	// &는 원래 데이터에 붙인 별명이므로 원본을 그대로 사용하고 싶을 때 쓴다.
	for (int& number : num)
		number = uid(dre);

	// 정렬 - qsort로 코딩
	int 비교함수( const void* p, const void* q);
	qsort(num, NUM, sizeof(int), 비교함수);
	
	// 정렬 후 출력
	for (int num : num)
		cout << format("{:8d}" , num);
	cout << '\n';

	cout << "비교함수 호출된 횟수 - " << cnt << '\n';

	save("소스.cpp");
}

int 비교함수(const void* p, const void* q)
{
	++cnt;
	cout << "비교 - " << *(int*)p << " - " << *(int*)q << '\n';
	return *(int*)(q) - *(int*)p;
}

===================================================
저장한 시간: 2023-10-04 수요일 오후 4:50:36
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 4일							월910수78	  (5주 2일)
//-----------------------------------------------------------------------------
// 10월 9일 (6주 1일) - 동영상
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// 정렬(sort) - C언어 라이브러리 함수 qsort
//-----------------------------------------------------------------------------
// 과제 - 정렬(sort)이란 무엇인가 알아보자
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
#include <random>
#include <format>

using namespace std;

// [문제] int값 여러개를 저장할 수 있는 배열을 만들어라.
// 각 int의 값을 1부터 999999까지 값 중 랜덤값으로 만들어라.
// 배열을 오름차순으로 정렬하라.
// 일부분을 출력해서 정렬된 것을 확인하라.

default_random_engine dre;
uniform_int_distribution uid(1, 999999);

int comp(const void* a, const void* b);
//----------
int main()
//----------				
{
	char p[] = "the quick brown fox jumps over the lazy dog";
		cout << p << '\n';

		// [문제] p를 오름차순으로 정렬한 후 출력하라.
		qsort(p, 43, 1, comp);

		cout << p << '\n';
		save("소스.cpp");
}

int comp(const void* a, const void* b)
{
	return *(char*)a - *(char*)b;
}

===================================================
저장한 시간: 2023-10-04 수요일 오후 5:00:54
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 4일							월910수78	  (5주 2일)
//-----------------------------------------------------------------------------
// 10월 9일 (6주 1일) - 동영상
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// 정렬(sort) - C언어 라이브러리 함수 qsort
//-----------------------------------------------------------------------------
// 과제 - 정렬(sort)이란 무엇인가 알아보자
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
#include <random>
#include <format>

using namespace std;

// [문제] int값 여러개를 저장할 수 있는 배열을 만들어라.
// 각 int의 값을 1부터 999999까지 값 중 랜덤값으로 만들어라.
// 배열을 오름차순으로 정렬하라.
// 일부분을 출력해서 정렬된 것을 확인하라.

default_random_engine dre;
uniform_int_distribution uid(1, 999999);

//----------
int main( )		// ()는 함수 호출 연산자임.
//----------				
{
	char p[] = "the quick brown fox jumps over the lazy dog";
		cout << p << '\n';

		// [문제] p를 오름차순으로 정렬한 후 출력하라.
		qsort(p, strlen(p), sizeof(char), [] (const void* a, const void* b) {		// 이름 없는 함수를 람다라고 부름.
			return *(char*)a - *(char*)b;
		});		

		cout << p << '\n';
		save("소스.cpp");
}

===================================================
저장한 시간: 2023-10-04 수요일 오후 5:04:15
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 4일							월910수78	  (5주 2일)
//-----------------------------------------------------------------------------
// 10월 9일 (6주 1일) - 동영상
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// 정렬(sort) - C언어 라이브러리 함수 qsort
//-----------------------------------------------------------------------------
// 과제 - 이름없는 함수 람다(lamda)
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
#include <random>
#include <format>

using namespace std;

// [문제] int값 여러개를 저장할 수 있는 배열을 만들어라.
// 각 int의 값을 1부터 999999까지 값 중 랜덤값으로 만들어라.
// 배열을 오름차순으로 정렬하라.
// 일부분을 출력해서 정렬된 것을 확인하라.

default_random_engine dre;
uniform_int_distribution uid(1, 999999);

// comp 가 compare? 찾아보기!

//----------
int main( )		// ()는 함수 호출 연산자임.
//----------				
{
	[ ]( ) {
		cout << "안녕, 난 람다라고 해, 반가워!" << '\n';
		}();			// ()가 없을 때는 호출이 안 되고, ()가 있을 때는 호출이 됨.

		save("소스.cpp");
}

===================================================
저장한 시간: 2023-10-04 수요일 오후 5:05:15
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 4일							월910수78	  (5주 2일)
//-----------------------------------------------------------------------------
// 10월 9일 (6주 1일) - 동영상
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// 정렬(sort) - C언어 라이브러리 함수 qsort
//-----------------------------------------------------------------------------
// 과제 - 이름없는 함수 람다(lamda)
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
#include <random>
#include <format>

using namespace std;

// [문제] int값 여러개를 저장할 수 있는 배열을 만들어라.
// 각 int의 값을 1부터 999999까지 값 중 랜덤값으로 만들어라.
// 배열을 오름차순으로 정렬하라.
// 일부분을 출력해서 정렬된 것을 확인하라.

default_random_engine dre;
uniform_int_distribution uid(1, 999999);

// comp 가 compare? 찾아보기!

//----------
int main( )		// ()는 함수 호출 연산자임.
//----------				
{
	auto x = [ ]( ) {
		cout << "안녕, 난 람다라고 해, 반가워!" << '\n';
		};			// ()가 없을 때는 호출이 안 되고, ()가 있을 때는 호출이 됨.

		x( );
		save("소스.cpp");
}

===================================================
저장한 시간: 2023-10-09 월요일 오후 11:11:07
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 9일							월910수78	  (6주 1일)
//-----------------------------------------------------------------------------
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// 실행 파일과 메모리
//-----------------------------------------------------------------------------
// 과제 - C++ STACK DATA CODE Free Store
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"

using namespace std;

int gn;			// DATA

//----------
int main( )		
//----------				
{
	int n;		// STACK
	
	cout << "지역변수 - " << n << '\n';
	cout << "전역변수 - " << gn << '\n';

		save("소스.cpp");
}

===================================================
저장한 시간: 2023-10-09 월요일 오후 11:13:07
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 9일							월910수78	  (6주 1일)
//-----------------------------------------------------------------------------
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// 실행 파일과 메모리
//-----------------------------------------------------------------------------
// 과제 - C++ STACK DATA CODE Free Store
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"

using namespace std;

int gn[10];			// DATA

//----------
int main( )		
//----------				
{
	for (int n : gn)
		cout << n << ' ';
	cout << '\n';
		save("소스.cpp");
}

===================================================
저장한 시간: 2023-10-09 월요일 오후 11:19:19
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 9일							월910수78	  (6주 1일)
//-----------------------------------------------------------------------------
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// 실행 파일과 메모리
//-----------------------------------------------------------------------------
// 과제 - C++ STACK DATA CODE Free Store
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"

using namespace std;

// [문제] 사용할 수 있는 전역변수의 크기는?
char a[1'000'000'000];

//----------
int main( )		
//----------				
{
	cout << a[0] << '\n';		// cout은 고급출력을 하는 객체 a[0]의 값은 아스키 코드에 찍혀서 아무것도 안나옴

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-10-09 월요일 오후 11:35:30
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 9일							월910수78	  (6주 1일)
//-----------------------------------------------------------------------------
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// 실행 파일과 메모리
//-----------------------------------------------------------------------------
// 과제 - C++ STACK DATA CODE Free Store
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"

using namespace std;

// [문제] 실행한 후 실행 파일의 크기를 살펴보세요.
char a[1'990'000'000]{ 'a', 'b', 'c' };

//----------
int main( )		
//----------				
{
	cout << a[0] << '\n';		// a

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-10-09 월요일 오후 11:44:33
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 9일							월910수78	  (6주 1일)
//-----------------------------------------------------------------------------
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// 실행 파일과 메모리
//-----------------------------------------------------------------------------
// 과제 - C++ STACK DATA CODE Free Store
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"

using namespace std;

//----------
int main( )		
//----------				
{
	new int;

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-10-10 화요일 오전 12:11:45
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 9일							월910수78	  (6주 1일)
//-----------------------------------------------------------------------------
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// 실행 파일과 메모리
//-----------------------------------------------------------------------------
// 과제 - C++ STACK DATA CODE Free Store
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"

using namespace std;

//----------
int main( )		
//----------				
{
	int* p;

	p =	new int;

	*p = 123;
	cout << *p << '\n';

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-10-10 화요일 오전 12:32:58
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 9일							월910수78	  (6주 1일)
//-----------------------------------------------------------------------------
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// 실행 파일과 메모리
//-----------------------------------------------------------------------------
// 과제 - C++ STACK DATA CODE Free Store
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"

using namespace std;

// [문제] 사용자가 정수 num을 입력한다.
// int를 num개 만큼 저장할 공간을 확보한다.
// 그 공간을 1부터 시작하는 정수로 채운다. [1, num]
// int값의 합계를 화면에 출력하라.
// 이 과정을 계속 반복하라.

//----------
int main( )
//----------
{
	save("소스.cpp");
	while (true) {
		cout << "int값을 입력하세요 - ";
		int num;
		cin >> num;

		int* p = new int[num];

		for (int i = 0; i < num; ++i)
			p[i] = i + 1;

		// 합계 계산
		int sum{ 0 };
		for (int i = 0; i < num; ++i)
			sum += p[i];

		cout << "1부터 " << num << "까지 합계 = " << sum << '\n';

		delete[] p;
	}	
}

===================================================
저장한 시간: 2023-10-10 화요일 오전 12:35:04
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 9일							월910수78	  (6주 1일)
//-----------------------------------------------------------------------------
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// 실행 파일과 메모리
//-----------------------------------------------------------------------------
// 과제 - C++ STACK DATA CODE Free Store
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"

using namespace std;

//----------
int main()
//----------				
{
	save("소스.cpp");

	int cnt{};
	while (true) {
		// 메모리 1GB 동적할당
		new char[1'000'000'000];
		cout << ++cnt << "기가 바이트 요청" << '\n';
	}
}

===================================================
저장한 시간: 2023-10-10 화요일 오전 12:37:10
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 9일							월910수78	  (6주 1일)
//-----------------------------------------------------------------------------
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// 실행 파일과 메모리
//-----------------------------------------------------------------------------
// 과제 - C++ STACK DATA CODE Free Store
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"

using namespace std;

//----------
int main()
//----------				
{
	save("소스.cpp");

	int cnt{};
	while (true) {
		// 메모리 1GB 동적할당
		try {
				new char[1'000'000'000];	// 할당해줄 메모리가 없으면 시스템은 예외를 던진다.
		}
		catch (exception& e) {
			cout << e.what() << '\n';
			return 333;
		}
		cout << ++cnt << "기가 바이트 요청" << '\n';
	}
}

===================================================
저장한 시간: 2023-10-10 화요일 오전 12:41:59
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 9일							월910수78	  (6주 1일)
//-----------------------------------------------------------------------------
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// 실행 파일과 메모리
//-----------------------------------------------------------------------------
// 과제 - C++ STACK DATA CODE Free Store
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
#include <chrono>

using namespace std;

// [관찰] 윈도우의 메모리 관리를 확인해본다.(ctrl + alt + del)

//----------
int main()
//----------				
{
	save("소스.cpp");

	int cnt{};
		while (true) {
			new char[1'000'000'000];
			cout << ++cnt << "기가 요청" << '\n';
			this_thread::sleep_for(3s);		// 3초 쉰다
		}
}

===================================================
저장한 시간: 2023-10-10 화요일 오전 12:48:04
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 9일							월910수78	  (6주 1일)
//-----------------------------------------------------------------------------
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// 실행 파일과 메모리
//-----------------------------------------------------------------------------
// 과제 - C++ STACK DATA CODE Free Store
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
#include <chrono>

using namespace std;

// [관찰] 윈도우의 메모리 관리를 확인해본다.(ctrl + alt + del)

//----------
int main()
//----------				
{
	save("소스.cpp");

	int cnt{};
		while (true) {
			char *p = new char[2'000'000'000] { 1, 2, 3 };
			cnt += 2;
			cout << cnt << "기가 요청" << '\n';
			this_thread::sleep_for(1s);		// 1초 쉰다
			delete[] p;
				cnt -= 2;
		}
}

===================================================
저장한 시간: 2023-10-11 수요일 오후 3:45:19
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 11일							월910수78	  (6주 2일)
//-----------------------------------------------------------------------------
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// [실습] 파일에 있는 많은 데이터를 읽고 쓰기
//-----------------------------------------------------------------------------
// 과제 - 값을 바꿔 가며 반복 연습한다.
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"

using namespace std;

// [문제] 화면에 1부터 100까지 정수를 출력하라

//----------
int main()
//----------				
{
	for (int i = 0; i < 100; ++i)
		cout << i + 1 << '\n';
	cout << '\n';

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-10-11 수요일 오후 3:47:57
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 11일							월910수78	  (6주 2일)
//-----------------------------------------------------------------------------
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// [실습] 파일에 있는 많은 데이터를 읽고 쓰기
//-----------------------------------------------------------------------------
// 과제 - 값을 바꿔 가며 반복 연습한다.
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
#include <fstream>

using namespace std;

// [문제] 화면에 1부터 100까지 정수를 출력하라

//----------
int main()
//----------				
{
	ofstream 파일{ "1부터100" };

	for (int i = 0; i < 100; ++i)
		파일 << i + 1 << '\n';
	파일 << '\n';

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-10-11 수요일 오후 4:30:35
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 11일							월910수78	  (6주 2일)
//-----------------------------------------------------------------------------
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// [실습] 파일에 있는 많은 데이터를 읽고 쓰기
//-----------------------------------------------------------------------------
// 과제 - 값을 바꿔 가며 반복 연습한다.
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
#include <fstream>
#include <random>

using namespace std;

default_random_engine dre;
uniform_int_distribution uid;

//----------
int main()
//----------				
{
	ofstream out{ "int만개.txt" };

	for (int i = 0; i < 10000; ++i) {
		out << uid(dre) << ' ';
	if (i % 10 == 0)
		out << '\n';
	}
	save("소스.cpp");
}

===================================================
저장한 시간: 2023-10-16 월요일 오후 5:29:38
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 11일							월910수78	  (7주 1일)
//-----------------------------------------------------------------------------
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// [실습] 파일에 있는 많은 데이터를 읽고 쓰기
//-----------------------------------------------------------------------------
// 과제 - 값을 바꿔 가며 반복 연습한다.
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
#include <fstream>

using namespace std;

int main()
{
	ifstream in { "int만개.txt" };
	if (!in)
		return 0;

	int num;
	while (in >> num) {
		cout << num << ' ';
	}
	save("소스.cpp");
}


===================================================
저장한 시간: 2023-10-16 월요일 오후 5:30:31
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 11일							월910수78	  (7주 1일)
//-----------------------------------------------------------------------------
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// [실습] 파일에 있는 많은 데이터를 읽고 쓰기
//-----------------------------------------------------------------------------
// 과제 - 값을 바꿔 가며 반복 연습한다.
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
#include <fstream>

using namespace std;

int main()
{
	ifstream in { "int만개.txt" };
	if (!in)
		return 0;

	int num;
	int cnt{};

	while (in >> num) {
		cout << num << ' ';
		++cnt;
	}

	cout << "읽은 개수 - " << cnt << '\n';
	save("소스.cpp");
}

===================================================
저장한 시간: 2023-10-16 월요일 오후 5:35:59
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 11일							월910수78	  (7주 1일)
//-----------------------------------------------------------------------------
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// [실습] 파일에 있는 많은 데이터를 읽고 쓰기
//-----------------------------------------------------------------------------
// 과제 - 값을 바꿔 가며 반복 연습한다.
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
#include <fstream>

using namespace std;

// [문제] "int만개.txt"에는 몇 개인지 모르는 int값이 저장되어 있다.
// 그 중에서 짝수는 몇개인지 출력하라.

int main()
{
	ifstream in { "int만개.txt" };
	if (!in)
		return 0;

	int num;
	int cnt{};

	while (in >> num) {
		cout << num << ' ';
		if(num % 2 == 0)
		++cnt;
	}

	cout << "짝수의 개수 - " << cnt << '\n';
	save("소스.cpp");
}

===================================================
저장한 시간: 2023-10-16 월요일 오후 5:37:39
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 11일							월910수78	  (7주 1일)
//-----------------------------------------------------------------------------
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// [실습] 파일에 있는 많은 데이터를 읽고 쓰기
//-----------------------------------------------------------------------------
// 과제 - 값을 바꿔 가며 반복 연습한다.
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
#include <fstream>

using namespace std;

// [문제] "int만개.txt"에는 몇 개인지 모르는 int값이 저장되어 있다.
// 그 중에서 짝수는 몇개인지 출력하라.

int main()
{
	ifstream in { "int만개.txt" };
	if (!in)
		return 0;

	int num;
	int cnt{};

	while (in >> num) {
		cout << num << ' ';
		if ( !(num & 1) ) {
			++cnt;
		}	
	}

	cout << "짝수의 개수 - " << cnt << '\n';
	save("소스.cpp");
}

===================================================
저장한 시간: 2023-10-16 월요일 오후 6:04:08
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 11일							월910수78	  (7주 1일)
//-----------------------------------------------------------------------------
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// [실습] 파일에 있는 많은 데이터를 읽고 쓰기
//-----------------------------------------------------------------------------
// 과제 - 값을 바꿔 가며 반복 연습한다.
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
#include <fstream>

using namespace std;

// [문제] "소스.cpp"에 알파벳 소문자의 개수를 세서 다음과 같이 출력하라.
// a - 12
// b - 22
// .
// z - 0

int main()
{
	ifstream in { "소스.cpp" };
	if (!in)
		return 0;

	int num[26]{ };

	char ch;
	while (in >> ch) {
		if (islower(ch))		// islower 소문자야? 묻는 거
			num[ch - 'a']++;
	}
	for (int i = 0; i < 26; ++i)
		cout << 'a' + i << " - " << num[i] << '\n';		// 시험에서는 이렇게 써놔도 정답이라고 함.

	save("소스.cpp");
}	

===================================================
저장한 시간: 2023-10-16 월요일 오후 6:05:29
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 11일							월910수78	  (7주 1일)
//-----------------------------------------------------------------------------
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// [실습] 파일에 있는 많은 데이터를 읽고 쓰기
//-----------------------------------------------------------------------------
// 과제 - 값을 바꿔 가며 반복 연습한다.
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
#include <fstream>

using namespace std;

// [문제] "소스.cpp"에 알파벳 소문자의 개수를 세서 다음과 같이 출력하라.
// a - 12
// b - 22
// .
// z - 0

int main()
{
	ifstream in { "소스.cpp" };
	if (!in)
		return 0;

	int num[26]{ };

	char ch;
	while (in >> ch) {
		if (islower(ch))		// islower 소문자야? 묻는 거
			num[ch - 'a']++;
	}
	for (int i = 0; i < 26; ++i)
		cout << static_cast<char>('a'+i) << " - " << num[i] << '\n';		// static_cast<char>('a'+i) 숫자를 알파벳으로 바꾸는법

	save("소스.cpp");
}	

===================================================
저장한 시간: 2023-10-16 월요일 오후 6:18:32
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 11일							월910수78	  (7주 1일)
//-----------------------------------------------------------------------------
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// [실습] 파일에 있는 많은 데이터를 읽고 쓰기
//-----------------------------------------------------------------------------
// 과제 - 값을 바꿔 가며 반복 연습한다.
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"
#include <fstream>

using namespace std;

// [문제] "소스.cpp"에 알파벳 소문자를 모두 대문자로 바꿔
// "소스대문자.cpp"에 저장하라.
int main()
{
	ifstream in { "소스.cpp" };
	if (!in)
		return 0;

	ofstream out{ "소스대문자.cpp" };

	char ch;
	in >> noskipws;		// 출력했을 때 띄어쓰기하게 하는 거
	while (in >> ch) {
			ch = toupper(ch);
		out << ch;		// out은 소스대문자.cpp에 저장하게 하는 거
	}	
	save("소스.cpp");
}	

===================================================
저장한 시간: 2023-10-16 월요일 오후 7:00:26
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 11일							월910수78	  (7주 1일)
//-----------------------------------------------------------------------------
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// 사용자 정의 자료형
//-----------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들고 반복 학습.
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"

using namespace std;

class Test {		// struct와 class의 차이점 : 전혀없음.
	int n;
	char c;
};

int main()
{
	Test t;
	cout << sizeof(t) << '\n';
	save("소스.cpp");
}	

===================================================
저장한 시간: 2023-10-16 월요일 오후 7:01:59
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 11일							월910수78	  (7주 1일)
//-----------------------------------------------------------------------------
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// 사용자 정의 자료형
//-----------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들고 반복 학습.
//-----------------------------------------------------------------------------

#include <iostream>
#include "save.h"

using namespace std;

class Test {		// struct와 class의 차이점 : 전혀없음.
	int n;
	char c;
};


int main()
{
	Test t[10];
	cout << sizeof(t) << '\n';
	save("소스.cpp");
}	

===================================================
저장한 시간: 2023-10-18 수요일 오후 3:55:20
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 18일							월910수78	  (7주 2일)
//-----------------------------------------------------------------------------
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// 사용자 정의 자료형
//-----------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들고 반복 학습.
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"

using namespace std;

struct Point2D {
	int x;
	int y;
};
int main()
{
	Point2D p;		// p는 객체라고 부르고 Point2D는 user defined type 이라고 부름

	p.x = 3;
	p.y = 4;

	cout << p.x << " , " << p.y << '\n';

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-10-18 수요일 오후 4:03:36
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 18일							월910수78	  (7주 2일)
//-----------------------------------------------------------------------------
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// 사용자 정의 자료형
//-----------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들고 반복 학습.
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"

using namespace std;

struct Point2D {
	// data member, member variable
	int x;
	int y;

	// member function
	void show() {
		cout << "(" << x << ", " << y << ")" << '\n';
	};			 
};
int main()
{
	Point2D p;		// p는 객체라고 부르고 Point2D는 user defined type 이라고 부름

	p.x = 3;
	p.y = 4;

	p.show( );

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-10-18 수요일 오후 4:38:37
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 18일							월910수78	  (7주 2일)
//-----------------------------------------------------------------------------
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// 사용자 정의 자료형
//-----------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들고 반복 학습.
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include <random>

using namespace std;
default_random_engine dre;
uniform_int_distribution uid{-100, 100};

struct Point2D {
	// data member, member variable
	int x;
	int y;

	// member function
	void show() {
		cout << "(" << x << ", " << y << ")" << '\n';
	};			 
};

// [실습] 랜덤값을 갖는 Point2D를 100개 만들어라.
// (x, y)값은 [-100, 100] 이다.
// 원점(0, 0)에서 반경 10까지 영향을 미치는 폭탄이 터졌다.
// 어떤 점이 이 폭탄에 영향을 받는 지 출력하라.
// root값을 구할 때는 qsort 함수를 사용하면 된다. 

int main()
{
	Point2D points[100];

	for (Point2D& point : points) {
		point.x = uid(dre);
		point.y = uid(dre);
	}

	for (Point2D point : points) {
		if (sqrt(point.x * point.x + point.y *point.y) < 20.0)
			point.show();
	}

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-10-18 수요일 오후 4:39:33
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 18일							월910수78	  (7주 2일)
//-----------------------------------------------------------------------------
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// 사용자 정의 자료형
//-----------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들고 반복 학습.
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include <random>

using namespace std;
default_random_engine dre;
uniform_int_distribution uid{-100, 100};
struct Point2D {
	// data member, member variable
	int x;
	int y;

	// member function
	void show() {
		cout << "(" << x << ", " << y << ")" << '\n';
	};			 
};

// [실습] 랜덤값을 갖는 Point2D를 100개 만들어라.
// (x, y)값은 [-100, 100] 이다.
// 원점(0, 0)에서 반경 10까지 영향을 미치는 폭탄이 터졌다.
// 어떤 점이 이 폭탄에 영향을 받는 지 출력하라.
// root값을 구할 때는 qsort 함수를 사용하면 된다. 

int main()
{
	Point2D a{ 3, 4 };
	Point2D b{ -10, 10 };

	a.show();
	b.show();

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-10-18 수요일 오후 4:56:27
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 18일							월910수78	  (7주 2일)
//-----------------------------------------------------------------------------
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// class
//-----------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들고 반복 학습.
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include <string>

using namespace std;

class Dog {
	string name;
	int age;
};

int main()
{
	Dog dog;
	cout << sizeof(Dog) << '\n';

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-10-18 수요일 오후 4:57:04
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 18일							월910수78	  (7주 2일)
//-----------------------------------------------------------------------------
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// class
//-----------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들고 반복 학습.
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include <string>

using namespace std;

class Dog {
	string name;
	int age;
};

int main()
{
	Dog dog;

	cout << sizeof string << '\n';

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-10-23 월요일 오후 5:40:48
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 23일							월910수78	  (8주 1일)
//-----------------------------------------------------------------------------
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// class
//-----------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들고 반복 학습.
//-----------------------------------------------------------------------------
#include <iostream>
#include <Windows.h>
#include <mmsystem.h>
#include <string>
#include "save.h"

#pragma comment(lib,"winmm.lib")
using namespace std;

class Dog {
	string name;
	int age;

public:
	Dog() {
		cout << "생성자가 호출됨" << '\n';
		PlaySound(L"개소리.wav", NULL, SND_FILENAME | SND_ASYNC);
	}
};
int main() 
{
	Dog dog;
	save("소스.cpp");
}

===================================================
저장한 시간: 2023-10-23 월요일 오후 5:48:48
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 23일							월910수78	  (8주 1일)
//-----------------------------------------------------------------------------
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// class
//-----------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들고 반복 학습.
//-----------------------------------------------------------------------------
#include <iostream>
#include <Windows.h>
#include <mmsystem.h>
#include <string>
#include "save.h"

#pragma comment(lib,"winmm.lib")
using namespace std;

class Dog {
	string name;
	int age;

public:
	Dog() {
		cout << "생성자가 호출됨" << '\n';
		PlaySound(L"개소리.wav", NULL, SND_FILENAME | SND_ASYNC);
	}
	~Dog() {
		cout << "소멸자를 호출함" << '\n';
		PlaySound(L"개소멸.wav", NULL, SND_FILENAME | SND_ASYNC);
	}
};
int main() 
{
	Dog dog[5];
	save("소스.cpp");
}

===================================================
저장한 시간: 2023-10-23 월요일 오후 5:52:13
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 23일							월910수78	  (8주 1일)
//-----------------------------------------------------------------------------
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// class
//-----------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들고 반복 학습.
//-----------------------------------------------------------------------------
#include <iostream>
#include <Windows.h>
#include <mmsystem.h>
#include <string>
#include "save.h"

#pragma comment(lib,"winmm.lib")
using namespace std;

class Dog {
	string name;
	int age;

public:
	Dog() {
		cout << "생성자가 호출됨" << '\n';
		PlaySound(L"개소리.wav", NULL, SND_FILENAME | SND_ASYNC);
	}
	~Dog() {
		cout << "소멸자를 호출함" << '\n';
		PlaySound(L"개소멸.wav", NULL, SND_FILENAME | SND_ASYNC);
	}
};
int main() 
{
	cout << "메인 시작" << '\n';
	{
		Dog dog;
	}

	save("소스.cpp");
	cout << "메인 끝" << '\n';
}

===================================================
저장한 시간: 2023-10-23 월요일 오후 6:00:28
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 23일							월910수78	  (8주 1일)
//-----------------------------------------------------------------------------
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// class
//-----------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들고 반복 학습.
//-----------------------------------------------------------------------------
#include <iostream>
#include <Windows.h>
#include <mmsystem.h>
#include <string>
#include "save.h"

#pragma comment(lib,"winmm.lib")
using namespace std;

class Dog {
	string name;
	int age;

public:
	Dog() {
		cout << "생성자가 호출됨" << '\n';
		PlaySound(L"개소리.wav", NULL, SND_ASYNC);
	}
	~Dog() {
		cout << "소멸자를 호출함" << '\n';
		PlaySound(L"개소멸.wav", NULL, SND_ASYNC);
	}
};
int main() 
{
	cout << "메인 시작" << '\n';
	
	Dog* p;		// 이렇게 절대 쓰지 말기!
	p = new Dog[2];
	
	delete[] p;
	save("소스.cpp");
	cout << "메인 끝" << '\n';
}

===================================================
저장한 시간: 2023-10-23 월요일 오후 6:03:35
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 23일							월910수78	  (8주 1일)
//-----------------------------------------------------------------------------
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// class
//-----------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들고 반복 학습.
//-----------------------------------------------------------------------------
#include <iostream>
#include <Windows.h>
#include <mmsystem.h>
#include <string>
#include "save.h"

#pragma comment(lib,"winmm.lib")
using namespace std;

class Dog {
	string name;
	int age;

public:
	Dog() {
		cout << "생성자가 호출됨" << '\n';
		PlaySound(L"개소리.wav", NULL, SND_ASYNC);
	}
	~Dog() {
		cout << "소멸자를 호출함" << '\n';
		PlaySound(L"개소멸.wav", NULL, SND_ASYNC);
	}
};
int main() 
{
	cout << "메인 시작" << '\n';
	
	unique_ptr<Dog> p{ new Dog };		// RALL
	save("소스.cpp");
	cout << "메인 끝" << '\n';
}

===================================================
저장한 시간: 2023-10-23 월요일 오후 6:14:33
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 23일							월910수78	  (8주 1일)
//-----------------------------------------------------------------------------
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// class
//-----------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들고 반복 학습.
//-----------------------------------------------------------------------------
#include <iostream>
#include <Windows.h>
#include <mmsystem.h>
#include <string>
#include "save.h"

#pragma comment(lib,"winmm.lib")
using namespace std;

class Dog {
	string name;
	int age;

public:
	Dog() {
		cout << "생성자가 호출됨" << '\n';
		PlaySound(L"개소리.wav", NULL, SND_ASYNC);
	}

	Dog(string name, int age) : name{ name }, age{ age } {			// 생성자는 overloading 이 가능함. Dog(string, int)
		cout << name << " - Dog(string, int)가 호출됨" << '\n';
	}

	~Dog() {
		cout << name << " - 소멸자를 호출함" << '\n';
		PlaySound(L"개소멸.wav", NULL, SND_ASYNC);
	}
};
int main() 
{
	cout << "메인 시작" << '\n';
	
	Dog dog{ "댕댕"s, 2 };

	save("소스.cpp");

	cout << "메인 끝" << '\n';
}

===================================================
저장한 시간: 2023-10-23 월요일 오후 6:22:35
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 23일							월910수78	  (8주 1일)
//-----------------------------------------------------------------------------
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// class
//-----------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들고 반복 학습.
//-----------------------------------------------------------------------------
#include <iostream>
#include <Windows.h>
#include <mmsystem.h>
#include <string>
#include "save.h"

#pragma comment(lib,"winmm.lib")
using namespace std;

class Dog {
	string name;
	int age;

public:
	Dog() {
		cout << "생성자가 호출됨" << '\n';
		PlaySound(L"개소리.wav", NULL, SND_ASYNC);
	}

	Dog(string name, int age) : name{ name }, age{ age } {			// 생성자는 overloading 이 가능함. Dog(string, int)
		cout << name << " - Dog(string, int)가 호출됨" << '\n';
	}

	~Dog() {
		cout << name << " - 소멸자를 호출함" << '\n';
		PlaySound(L"개소멸.wav", NULL, SND_ASYNC);
	}
};
int main() 
{
	cout << "메인 시작" << '\n';

	Dog dog[3]{ {"댕댕"s, 2}, {"코코"s, 5}, {"야옹"s, 20} };

	save("소스.cpp");

	cout << "메인 끝" << '\n';
}

===================================================
저장한 시간: 2023-10-23 월요일 오후 7:04:38
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 23일							월910수78	  (8주 1일)
//-----------------------------------------------------------------------------
// 10월 25일(8주 2일) - 중간시험
//-----------------------------------------------------------------------------
// class
//-----------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들고 반복 학습.
//-----------------------------------------------------------------------------
#include <iostream>
#include <Windows.h>
#include <mmsystem.h>
#include <string>
#include "save.h"

#pragma comment(lib,"winmm.lib")
using namespace std;

class Dog {
	string name;
	int age;

public:
	Dog() {		// default 생성자
		cout << "생성자가 호출됨" << '\n';
		// PlaySound(L"개소리.wav", NULL, SND_ASYNC);
	}

	Dog(string name, int age) : name{ name }, age{ age } {			// 생성자는 overloading 이 가능함. Dog(string, int)
		cout << name << " - Dog(string, int)가 호출됨" << '\n';
	}

	~Dog() {	// 소멸자
		cout << name << " - 소멸자를 호출함" << '\n';
		// PlaySound(L"개소멸.wav", NULL, SND_ASYNC);
	}

	// copy constructor - 복사생성자
	Dog(const Dog& other) : name { other.name }, age { other.age } {
		cout << name << "을 복사생성함" << '\n';
		// PlaySound(L"개소멸.wav", NULL, SND_ASYNC);
	}

	// copy assignment operator - 복사할당연산
	Dog& operator=(const Dog& other) {
		// 나는 이미 존재하는 객체니까 다른 객체로 바뀌기 전에 
		// 정리할 것이 있으면 정리한 후 변신하자.
		
		// 나를 나로 할당하지는 말자
		if (this == &other)
			return *this;

		// 정리할 것이 있으면 정리한다 - 지금은 정리할 것이 없다
		
		cout << "복사할당연산자 호출" << '\n';
		name = other.name;
		cout << name << '\n';
		age = other.age;
		return *this;
	}
};
int main()
{
	Dog dog{ "댕댕", 2 };
	Dog x{ "x", 10 };
	Dog d = dog;		// 복사 생성
	x = x = x = x = x;
	d = x;				// 복사 할당

	// Special Function - 6가지 1. 생성 -> Dog() 2. 소멸 -> ~Dog()
	// 3. 복사 생성 -> Dog(const Dog&) 4. 복사 할당 -> operator = ( ); 
	// 5. 이동 생성 -> Dog( Dog && ); 6. 이동 할당 -> operator = ( );
	save("소스.cpp");
}

===================================================
저장한 시간: 2023-10-30 월요일 오후 6:50:02
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 30일							월910수78	  (9주 1일)
//-----------------------------------------------------------------------------
// class
//-----------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들고 반복 학습.
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"

using namespace std;

// [문제] 나는 MemoryMonster 다. 생성시에 int값 num을 전달하면
// Free store에 num개의 int를 저장할 공간을 확보하고 그 값을 모두 num으로 채운다.
// 다음 코드가 문제없이 실행되도록 코딩하자.
class MemoryMonster {
	int num;

public:
	MemoryMonster(int a) : num(a) {
		int* p = new int[num];
		for (int i = 0; i < num; ++i)
			p[i] = num;
	}
	void show() {
		cout << "Monster-" << num << '\n';
	}
};
int main()
{
	MemoryMonster mon{ 123 };

	mon.show(); // 화면에 "Monster-123"이라고 출력한다.
	MemoryMonster m[5]{ 100, 3000, 200, 3, 777 };

	for (int i = 0; i < 5; ++i)
		m[i].show();
	save("소스.cpp");
}

===================================================
저장한 시간: 2023-10-30 월요일 오후 7:02:15
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  10월 30일							월910수78	  (9주 1일)
//-----------------------------------------------------------------------------
// class
//-----------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들고 반복 학습.
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"

using namespace std;

// [문제] 나는 MemoryMonster 다. 생성시에 int값 num을 전달하면
// Free store에 num개의 int를 저장할 공간을 확보하고 그 값을 모두 num으로 채운다.
// 다음 코드가 문제없이 실행되도록 코딩하자.
class MemoryMonster {
	int num;
	int* p;

public:
	MemoryMonster(int a) : num{ a } {
		p = new int[num];
		for (int i = 0; i < num; ++i)
			p[i] = num;
		cout << "메몬 생성 - " << num << '\n';
	}

	~MemoryMonster() {
		cout << "메몬 소멸 - " << num << '\n';
		delete[] p;
	}
	void show() {
		cout << "Monster-" << num << '\n';
	}
};
int main()
{
	MemoryMonster a{100};
	MemoryMonster b{3333};
							// 출력되었을 때 왜 a,b가 생성되고 b가 먼저 소멸되는 지 찾아보기
	save("소스.cpp");
}

===================================================
저장한 시간: 2023-11-01 수요일 오후 4:25:16
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 1일							월910수78	  (9주 2일)
//-----------------------------------------------------------------------------
// class
//-----------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들고 반복 학습.
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"

using namespace std;

// [문제] 나는 MemoryMonster 다. 생성시에 int값 num을 전달하면
// Free store에 num개의 int를 저장할 공간을 확보하고 그 값을 모두 num으로 채운다.
// 다음 코드가 문제없이 실행되도록 코딩하자.

class MemoryMonster {
	int num{};
	int* p{nullptr};

public:
	MemoryMonster() :num{}, p{ nullptr } {
		cout << "메몬 디폴트 생성 - " << num << '\n';
	}

	MemoryMonster(int a) : num{ a } {
		p = new int[num];
		for (int i = 0; i < num; ++i)
			p[i] = num;
		cout << "메몬 생성 - " << num << '\n';
	}

	~MemoryMonster() {
		cout << "메몬 소멸 - " << num << '\n';
		delete[] p;
	}

	// 복사생성자
	MemoryMonster(const MemoryMonster& other) : num{ other.num } {		
		p = new int[num];
		// 고속 메모리 복사
		memcpy(p, other.p, num * sizeof(int));
		cout << "메몬을 복사생성함 - " << num << '\n';
	}

	void show() {
		cout << "Monster-" << num << '\n';
	}
};
int main()
{
	MemoryMonster mons[10]{ 1, 3, 5, 7, 9, 2, 4, 6, 8, 10 };			// 거꾸로 소멸되는 이유?
	
	cout << "레퍼런스의 의미" << '\n';
	for (MemoryMonster mon : mons)
		mon.show();

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-11-01 수요일 오후 4:37:17
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 1일							월910수78	  (9주 2일)
//-----------------------------------------------------------------------------
// class
//-----------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들고 반복 학습.
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"

using namespace std;

// [문제] 나는 MemoryMonster 다. 생성시에 int값 num을 전달하면
// Free store에 num개의 int를 저장할 공간을 확보하고 그 값을 모두 num으로 채운다.
// 다음 코드가 문제없이 실행되도록 코딩하자.

class MemoryMonster {
	int num{};
	int* p{nullptr};

public:
	MemoryMonster() :num{}, p{ nullptr } {
		cout << "메몬 디폴트 생성 - " << num << '\n';
	}

	MemoryMonster(int a) : num{ a } {
		p = new int[num];
		for (int i = 0; i < num; ++i)
			p[i] = num;
		cout << "메몬 생성 - " << num << '\n';
	}

	~MemoryMonster() {
		cout << "메몬 소멸 - " << num << '\n';
		delete[] p;
	}

	// 복사생성자
	MemoryMonster(const MemoryMonster& other) : num{ other.num } {		
		p = new int[num];
		// 고속 메모리 복사
		memcpy(p, other.p, num * sizeof(int));
		cout << "메몬을 복사생성함 - " << num << '\n';
	}

	void show() const {
		cout << "Monster-" << num << '\n';
	}
};
int main()
{
	MemoryMonster mons[]{ 1, 3, 5 };			// 거꾸로 소멸되는 이유?
	
	cout << "레퍼런스의 의미" << '\n';

	for ( const MemoryMonster& mon : mons)
		mon.show();		// cv qualifier 

	cout << "세이브 전" << '\n';

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-11-06 월요일 오후 5:41:57
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 6일							월910수78	  (10주 1일)
//-----------------------------------------------------------------------------
// class
//-----------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들고 반복 학습.
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"

using namespace std;

// [문제] 나는 MemoryMonster 다. 생성시에 int값 num을 전달하면
// Free store에 num개의 int를 저장할 공간을 확보하고 그 값을 모두 num으로 채운다.
// 다음 코드가 문제없이 실행되도록 코딩하자.

class MemoryMonster {
	int num{};
	int* p{ nullptr };

public:
	MemoryMonster() :num{}, p{ nullptr } {
		cout << "메몬 디폴트 생성 - " << num << '\n';
	}

	MemoryMonster(int a) : num{ a } {
		p = new int[num];
		for (int i = 0; i < num; ++i)
			p[i] = num;
		cout << "메몬 생성 - " << num << '\n';
	}

	~MemoryMonster() {
		cout << "메몬 소멸 - " << num << '\n';
		delete[] p;
	}

	// 복사생성자
	MemoryMonster(const MemoryMonster& other) : num{ other.num } {
		p = new int[num];
		// 고속 메모리 복사
		memcpy(p, other.p, num * sizeof(int));
		cout << "메몬을 복사생성함 - " << num << '\n';
	}
	// 복사생성자를 코딩했다면 반드시 이와 짝이되는 복사할당연산자(copy assignment operator)를
	// 코딩해야만 한다.
	MemoryMonster& operator=(const MemoryMonster& other) {
		delete[] p;			// 내가 관리하던 자원을 해제
		num = other.num;
		p = new int[num];
		memcpy(p, other.p, sizeof(int) * num);
		cout << "메몬을 복사할당함 - " << num << '\n';

		return *this;

	}

	// 이 클래스가 바깥 세상과 소통하기 위한 멤버함수 - interface 함수라고 함.
	// gettor와 settor를 필요한 경우 코딩한다.
	int getNum() const {
		return num;
	}

	void show() const {
		cout << "Monster-" << num << '\n';
	}
};
int main()
{
	MemoryMonster a{ 100 };
	MemoryMonster b{ 500 };
	b = a;					// copy assignment -> operator=()

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-11-06 월요일 오후 5:57:34
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 6일							월910수78	  (10주 1일)
//-----------------------------------------------------------------------------
// class
//-----------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들고 반복 학습.
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include <string>

using namespace std;

int main()
{
	string s{ "안녕? 난 C의 char*를 완벽하게 대체하는 객체야!" };
	cout << s << '\n';
	save("소스.cpp");
}

===================================================
저장한 시간: 2023-11-06 월요일 오후 5:58:07
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 6일							월910수78	  (10주 1일)
//-----------------------------------------------------------------------------
// class
//-----------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들고 반복 학습.
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include <string>

using namespace std;

int main()
{
	string s{ "안녕? 난 C의 char*를 완벽하게 대체하는 객체야!" };

	s = s + " 2023년 11월 6일";
	cout << s << '\n';
	save("소스.cpp");
}

===================================================
저장한 시간: 2023-11-06 월요일 오후 6:19:26
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 6일							월910수78	  (10주 1일)
//-----------------------------------------------------------------------------
// class
//-----------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들고 반복 학습.
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include <string>

using namespace std;

class STRING {
	size_t size;
	char* p;
public :
	STRING(const char* s) : size{ strlen(s) } {
		p = new char[size];
		memcpy(p, s, size);

		cout << "STRING(const char*) - " << size << ", 번지:" << (void*)p << '\n';
	}

	~STRING() {
		cout << "~STRING() - " << size << ", 번지:" << (void*)p << '\n';
		delete[] p;
	}
	void show() const {
		for (int i = 0; i < size; ++i)
			cout << p[i];
			cout << '\n';
	}
};
int main()
{
	// STRING의 생성자는 const char*로 전달하고 처리하자. string 사용하지 말 것.
	STRING s{ "안녕? 난 C의 char*를 완벽하게 대체하는 객체야!" };

	s.show();

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-11-06 월요일 오후 6:20:44
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 6일							월910수78	  (10주 1일)
//-----------------------------------------------------------------------------
// class
//-----------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들고 반복 학습.
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include <string>

using namespace std;

class STRING {
	size_t size;
	char* p;
public :
	STRING(const char* s) : size{ strlen(s) } {
		p = new char[size];
		memcpy(p, s, size);

		cout << "STRING(const char*) - " << size << ", 번지:" << (void*)p << '\n';
	}
	~STRING() {
		cout << "~STRING() - " << size << ", 번지:" << (void*)p << '\n';
		delete[] p;
	}
	void show() const {
		for (int i = 0; i < size; ++i)
			cout << p[i];
			cout << '\n';
	}
};
int main()
{
	// STRING의 생성자는 const char*로 전달하고 처리하자. string 사용하지 말 것.
	STRING s{ "안녕? 난 C의 char*를 완벽하게 대체하는 객체야!" };
	STRING t = s;

	s.show();

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-11-06 월요일 오후 6:29:49
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 6일							월910수78	  (10주 1일)
//-----------------------------------------------------------------------------
// class
//-----------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들고 반복 학습.
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include <string>

using namespace std;

class STRING {
	size_t size;
	char* p;
public :
	STRING(const char* s) : size{ strlen(s) } {
		p = new char[size];
		memcpy(p, s, size);

		cout << "STRING(const char*) - " << size << ", 번지:" << (void*)p << '\n';
	}
	~STRING() {
		cout << "~STRING() - " << size << ", 번지:" << (void*)p << '\n';
		delete[] p;
	}
	// 복사생성자
	STRING(const STRING& other) : size{ other.size } {
		p = new char[size];
		// 깊은 복사
		memcpy(p, other.p, size);
		cout << "STRING 복사생성 - " << size << ", 번지:" << (void*)p << '\n';
	}

	void show() const {
		for (int i = 0; i < size; ++i)
			cout << p[i];
			cout << '\n';
	}
};
int main()
{
	// STRING의 생성자는 const char*로 전달하고 처리하자. string 사용하지 말 것.
	STRING s{ "난 string이야!" };
	STRING t = s;

	s.show();
	t.show();

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-11-06 월요일 오후 6:39:26
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 6일							월910수78	  (10주 1일)
//-----------------------------------------------------------------------------
// class
//-----------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들고 반복 학습.
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include <string>

using namespace std;

class STRING {
	size_t size;
	char* p;
public :
	STRING(const char* s) : size{ strlen(s) } {
		p = new char[size];
		memcpy(p, s, size);

		cout << "STRING(const char*) - " << size << ", 번지:" << (void*)p << '\n';
	}
	~STRING() {
		cout << "~STRING() - " << size << ", 번지:" << (void*)p << '\n';
		delete[] p;
	}
	// 복사생성자
	STRING(const STRING& other) : size{ other.size } {
		p = new char[size];
		// 깊은 복사
		memcpy(p, other.p, size);
		cout << "STRING 복사생성 - " << size << ", 번지:" << (void*)p << '\n';
	}

	STRING& operator=(const STRING& other) {
		delete[] p;
		size = other.size;
		p = new char[size];
		memcpy(p, other.p, size);

		cout << "STRING 복사할당연산자 - " << size << ", 번지:" << (void*)p << '\n';

		return *this;
	}
	void show() const {
		for (int i = 0; i < size; ++i)
			cout << p[i];
			cout << '\n';
	}
};
int main()
{
	// STRING의 생성자는 const char*로 전달하고 처리하자. string 사용하지 말 것.
	STRING s{ "난 string이야!" };
	STRING t{ "오늘은 비가 왔다" };

	s.show();
	t.show();

	t = s;

	t.show();

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-11-06 월요일 오후 6:45:39
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 6일							월910수78	  (10주 1일)
//-----------------------------------------------------------------------------
// class
//-----------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들고 반복 학습.
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include <string>

using namespace std;

class STRING {
	size_t size;
	char* p;
public :
	STRING(const char* s) : size{ strlen(s) } {
		p = new char[size];
		memcpy(p, s, size);

		cout << "STRING(const char*) - " << size << ", 번지:" << (void*)p << '\n';
	}
	~STRING() {
		cout << "~STRING() - " << size << ", 번지:" << (void*)p << '\n';
		delete[] p;
	}
	// 복사생성자
	STRING(const STRING& other) : size{ other.size } {
		p = new char[size];
		// 깊은 복사
		memcpy(p, other.p, size);
		cout << "STRING 복사생성 - " << size << ", 번지:" << (void*)p << '\n';
	}

	STRING& operator=(const STRING& other) {
		// 나를 나로 할당하는 짓을 할 이유는 없잖아요.
		if (this == &other)
			return *this;
		delete[] p;
		size = other.size;
		p = new char[size];
		memcpy(p, other.p, size);

		cout << "STRING 복사할당연산자 - " << size << ", 번지:" << (void*)p << '\n';

		return *this;
	}
	void show() const {
		for (int i = 0; i < size; ++i)
			cout << p[i];
			cout << '\n';
	}
};
int main()
{
	string s{ "글자를 메모리에 저장하고 관리한다" };
	string t = move(s);

	cout << "s - " << s << '\n';
	cout << "t - " << t << '\n';

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-11-06 월요일 오후 7:03:10
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 6일							월910수78	  (10주 1일)
//-----------------------------------------------------------------------------
// class
//-----------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들고 반복 학습.
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include <string>

using namespace std;

class STRING {
	size_t size;
	char* p;
public :
	STRING(const char* s) : size{ strlen(s) } {
		p = new char[size];
		memcpy(p, s, size);

		cout << "STRING(const char*) - " << size << ", 번지:" << (void*)p << '\n';
	}
	~STRING() {
		cout << "~STRING() - " << size << ", 번지:" << (void*)p << '\n';
		delete[] p;
	}
	// 복사생성자
	STRING(const STRING& other) : size{ other.size } {
		p = new char[size];
		// 깊은 복사
		memcpy(p, other.p, size);
		cout << "STRING 복사생성 - " << size << ", 번지:" << (void*)p << '\n';
	}

	STRING& operator=(const STRING& other) {
		// 나를 나로 할당하는 짓을 할 이유는 없잖아요.
		if (this == &other)
			return *this;
		delete[] p;
		size = other.size;
		p = new char[size];
		memcpy(p, other.p, size);

		cout << "STRING 복사할당연산자 - " << size << ", 번지:" << (void*)p << '\n';

		return *this;
	}
	// C++11에서 도입한 이동생성과 이동할당을 코딩
	// && - r-value reference(이동문법지원과 완벽전달(perfect forwarding)
	STRING(STRING&& other) : size{ other.size } {
		p = other.p;

		// 만료(expired)될 객체 other을 초기화한다
		size = 0;
		p = nullptr;
		cout << "STRING 이동생성 - " << size << ", 번지:" << (void*)p << '\n';
	}

	void show() const {
		for (int i = 0; i < size; ++i)
			cout << p[i];
			cout << '\n';
	}
};
int main()
{
	STRING s{ "글자를 메모리에 저장하고 관리한다" };
	STRING t = move(s);			// 이동생성자를 코딩한다면 이동이 가능, 없으면 대신 복사생성

	s.show();
	t.show();

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-11-08 수요일 오후 3:42:16
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 8일							월910수78	  (10주 2일)
//-----------------------------------------------------------------------------
// class
//-----------------------------------------------------------------------------
// 과제 - 나만의 자료형을 만들고 반복 학습.
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include <string>

using namespace std;

class STRING {
	size_t size;
	char* p;
public :
	STRING(const char* s) : size{ strlen(s) } {
		p = new char[size];
		memcpy(p, s, size);

		cout << "STRING(const char*) - " << size << ", 번지:" << (void*)p << '\n';
	}
	~STRING() {
		cout << "~STRING() - " << size << ", 번지:" << (void*)p << '\n';
		delete[] p;
	}
	// 복사생성자
	STRING(const STRING& other) : size{ other.size } {
		p = new char[size];
		// 깊은 복사
		memcpy(p, other.p, size);
		cout << "STRING 복사생성 - " << size << ", 번지:" << (void*)p << '\n';
	}

	STRING& operator=(const STRING& other) {
		// 나를 나로 할당하는 짓을 할 이유는 없잖아요.
		if (this == &other)
			return *this;
		delete[] p;
		size = other.size;
		p = new char[size];
		memcpy(p, other.p, size);

		cout << "STRING 복사할당연산자 - " << size << ", 번지:" << (void*)p << '\n';

		return *this;
	}
	// C++11에서 도입한 이동생성과 이동할당을 코딩
	// && - r-value reference(이동문법지원과 완벽전달(perfect forwarding)
	STRING(STRING&& other) : size{ other.size } {
		p = other.p;

		// 만료(expired)될 객체 other을 초기화한다
		other.size = 0;
		other.p = nullptr;
		cout << "STRING 이동생성 - " << size << ", 번지:" << (void*)p << '\n';
	}

	void show() const {
		for (int i = 0; i < size; ++i)
			cout << p[i];
			cout << '\n';
	}
};
int main()
{
	STRING s{ "글자를 메모리에 저장하고 관리한다" };		// (RAII)
	STRING t{ "나도 문자열을 관리하는 중" };

	cout << "s - "; s.show();
	cout << "t - "; t.show();

	t = move(s);
	cout << "이미 만들어진 객체 t가 s의 자원을 이동하여 가져온다" << '\n';

	cout << "s - "; s.show();
	cout << "t - "; t.show();

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-11-13 월요일 오후 6:07:48
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 8일							월910수78	  (10주 2일)
//-----------------------------------------------------------------------------
// 학생들이 잘하고 있나 관찰하지 말자. 아무도 없다고 생각하자.
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include <string>
#include "STRING.h"

using namespace std;

int main()
{
	// STRING::관찰 = true;

	STRING s{ "1234567890" };
	
	STRING temp = s;

	// s = s + "--------------1234567890";	// std::string은 POD 처럼 + 연산자를 사용한다
	s = s.operator+(" - 1234567890");

	s.show();				// 화면 출력 "1234567890"
	// cout << s << '\n';
	save("소스.cpp");
}

===================================================
저장한 시간: 2023-11-13 월요일 오후 6:12:08
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 8일							월910수78	  (10주 2일)
//-----------------------------------------------------------------------------
// 학생들이 잘하고 있나 관찰하지 말자. 아무도 없다고 생각하자.
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include <string>
#include "STRING.h"

using namespace std;

int main()
{
	cout.operator<<(1);

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-11-13 월요일 오후 6:14:35
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 8일							월910수78	  (10주 2일)
//-----------------------------------------------------------------------------
// 학생들이 잘하고 있나 관찰하지 말자. 아무도 없다고 생각하자.
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include <string>
#include "STRING.h"

using namespace std;

int main()
{
	// cout << 1 << 2 << 3;
	cout.operator<<(1).operator<<(2).operator<<(3).operator<<('\n');
	
	save("소스.cpp");
}

===================================================
저장한 시간: 2023-11-13 월요일 오후 6:33:27
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 8일							월910수78	  (10주 2일)
//-----------------------------------------------------------------------------
// 학생들이 잘하고 있나 관찰하지 말자. 아무도 없다고 생각하자.
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include <string>
#include "STRING.h"

using namespace std;

int main()
{ 
	STRING s{ "123" };

	cout << s;			// cout.operator<<(STRING) 이런 함수를 코딩하면 해결
						// 이렇게 하면 표준을 변경할 수 밖에 없다.
	// 컴파일러는 연산자 오버로딩을 해결하기 위해
	// lefthand side  operator		righthand side
	// 1. lhs의 멤버함수로 operator기호(rhs) 함수가 있나 찾는다.
	// 2. operator기호( lhs, rhs )인 전역함수가 있나 찾는다. 

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-11-15 수요일 오후 3:58:49
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 15일						 월910수78		 (11주 2일)
//-----------------------------------------------------------------------------
// 학생들이 잘하고 있나 관찰하지 말자. 아무도 없다고 생각하자.
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include <string>
#include "STRING.h"

using namespace std;

int main()
{
	STRING::관찰 = true;
	STRING s{ "C++ Programming Language" };

	s = "학생을 쳐다보지 않는다" + s;
	// 1. 왼쪽 피연산자의 멤버로 .operator+(s)가 있나 찾는다
	// 2. 전역함수를 찾는다. operator+(const char*, STRING)

	cout << s << '\n';

	save("소스.cpp");
	save("STRING.h");
	save("STRING.cpp");
}

===================================================
저장한 시간: 2023-11-15 수요일 오후 4:29:17
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 15일						 월910수78		 (11주 2일)
//-----------------------------------------------------------------------------
// 학생들이 잘하고 있나 관찰하지 말자. 아무도 없다고 생각하자.
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include <string>
#include "STRING.h"

using namespace std;

int main()
{
	STRING s[5]{ "333", "1", "55555", "4444", "22" };

	// [문제] s를 길이오름차순으로 정렬하라.
	// s를 모두 더한 temp를 만들어라

	qsort(s, 5, sizeof(STRING), [](const void* a, const void* b) {
		return static_cast<int>(((STRING*)a)->length() - (*(STRING*)b).length());			// 앞에꺼 사용하기!
	});

	STRING temp;
	for (const STRING& s : s)
		temp = temp + s;

	cout << temp << '\n';

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-11-15 수요일 오후 4:58:10
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 15일						 월910수78		 (11주 2일)
//-----------------------------------------------------------------------------
// 학생들이 잘하고 있나 관찰하지 말자. 아무도 없다고 생각하자.
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include <string>
#include "STRING.h"

using namespace std;

class INT {
	int num{};

public:
	INT() {};		// 생성자를 하나라도 코딩했다면 special 함수인
					// default ctor를 코딩한다
	INT(int val) : num{ val } {
	};

	friend ostream& operator<<(ostream& os, INT i) {
		return os << i.num;
	}

};
int main()
{
	INT n{ 100 };

	cout << n << '\n';

	save("소스.cpp"); 
}

===================================================
저장한 시간: 2023-11-15 수요일 오후 4:59:03
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 15일						 월910수78		 (11주 2일)
//-----------------------------------------------------------------------------
// 학생들이 잘하고 있나 관찰하지 말자. 아무도 없다고 생각하자.
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include <string>
#include "STRING.h"

using namespace std;

class INT {
	int num{};

public:
	INT() {};		// 생성자를 하나라도 코딩했다면 special 함수인
					// default ctor를 코딩한다
	INT(int val) : num{ val } {
	};

	friend ostream& operator<<(ostream& os, INT i) {
		return os << i.num;
	}

};
int main()
{
	INT n{ 100 };

	INT x = n;

	cout << x << '\n';

	save("소스.cpp"); 
} 

===================================================
저장한 시간: 2023-11-20 월요일 오후 5:47:11
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 20일						 월910수78		 (12주 1일)
//-----------------------------------------------------------------------------
// 2023. 12. 11. 월요일(15주 1일) - 한학기 정리, 책소개, 종강
// 2023. 12. 13. 수요일(15주 2일) - 기말시험, 12월 18일 월요일 - 성적게시
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include <string>
#include "STRING.h"

using namespace std;

void f(int);

void f(int n) 
{
	cout << "인자" << n << "을 전달 받았습니다" << '\n';
}
int main()
{
	f(3);
	 save("소스.cpp");
}

===================================================
저장한 시간: 2023-11-20 월요일 오후 5:48:32
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 20일						 월910수78		 (12주 1일)
//-----------------------------------------------------------------------------
// 2023. 12. 11. 월요일(15주 1일) - 한학기 정리, 책소개, 종강
// 2023. 12. 13. 수요일(15주 2일) - 기말시험, 12월 18일 월요일 - 성적게시
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include <string>
#include "STRING.h"

using namespace std;

void f(int);

void f(int n) 
{
	cout << "인자" << n << "을 전달 받았습니다" << '\n';
}
int main()
{
	(*f)(3);
	save("소스.cpp");
}

===================================================
저장한 시간: 2023-11-20 월요일 오후 5:50:36
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 20일						 월910수78		 (12주 1일)
//-----------------------------------------------------------------------------
// 2023. 12. 11. 월요일(15주 1일) - 한학기 정리, 책소개, 종강
// 2023. 12. 13. 수요일(15주 2일) - 기말시험, 12월 18일 월요일 - 성적게시
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include <string>
#include "STRING.h"

using namespace std;

void f(int);

void f(int n) 
{
	cout << "인자" << n << "을 전달 받았습니다" << '\n';
}
int main()
{
	int a[10];

	cout << typeid(a).name() << '\n';

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-11-20 월요일 오후 5:52:02
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 20일						 월910수78		 (12주 1일)
//-----------------------------------------------------------------------------
// 2023. 12. 11. 월요일(15주 1일) - 한학기 정리, 책소개, 종강
// 2023. 12. 13. 수요일(15주 2일) - 기말시험, 12월 18일 월요일 - 성적게시
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include <string>
#include "STRING.h"

using namespace std;

void f(int);

void f(int n) 
{
	cout << "인자" << n << "을 전달 받았습니다" << '\n';
}
int main()
{
	
	void (*x)(int) = f;
	//int a[10];

	cout << typeid(x).name() << '\n';

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-11-20 월요일 오후 5:53:57
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 20일						 월910수78		 (12주 1일)
//-----------------------------------------------------------------------------
// 2023. 12. 11. 월요일(15주 1일) - 한학기 정리, 책소개, 종강
// 2023. 12. 13. 수요일(15주 2일) - 기말시험, 12월 18일 월요일 - 성적게시
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include <string>
#include "STRING.h"

using namespace std;

void f(int);

void f(int n) 
{
	cout << "인자" << n << "을 전달 받았습니다" << '\n';
}
int main()
{
	
	void (*x)(int) = f;
	//int a[10];

	cout << sizeof(x) << '\n';
	cout << typeid(x).name() << '\n';

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-11-20 월요일 오후 6:07:03
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 20일						 월910수78		 (12주 1일)
//-----------------------------------------------------------------------------
// 2023. 12. 11. 월요일(15주 1일) - 한학기 정리, 책소개, 종강
// 2023. 12. 13. 수요일(15주 2일) - 기말시험, 12월 18일 월요일 - 성적게시
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include <string>
#include "STRING.h"

using namespace std;

// 호출할 수(callable) 있는 것은 함수뿐이 아니다.
// 1. 함수
// 2. 함수를 가리키는 포인터를 호출할 수 있다. 
// 3. 

// Dog가 ()연산자를 오버로딩 - () - function call operator
class Dog {
public:
	void operator+( int ) { };
	void operator()(int n) {
		cout << n << "을 받았습니다" << '\n';
	}
};
int main()
{
	Dog dog;

	dog(333);

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-11-20 월요일 오후 6:07:33
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 20일						 월910수78		 (12주 1일)
//-----------------------------------------------------------------------------
// 2023. 12. 11. 월요일(15주 1일) - 한학기 정리, 책소개, 종강
// 2023. 12. 13. 수요일(15주 2일) - 기말시험, 12월 18일 월요일 - 성적게시
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include <string>
#include "STRING.h"

using namespace std;

// 호출할 수(callable) 있는 것은 함수뿐이 아니다.
// 1. 함수
// 2. 함수를 가리키는 포인터를 호출할 수 있다. 
// 3. 

// Dog가 ()연산자를 오버로딩 - () - function call operator
class Dog {
public:
	void operator+( int ) { };
	void operator()(int n) {
		cout << n << "을 받았습니다" << '\n';
	}
};
int main()
{
	Dog dog;

	dog.operator()(333);

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-11-20 월요일 오후 6:25:08
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 20일						 월910수78		 (12주 1일)
//-----------------------------------------------------------------------------
// 2023. 12. 11. 월요일(15주 1일) - 한학기 정리, 책소개, 종강
// 2023. 12. 13. 수요일(15주 2일) - 기말시험, 12월 18일 월요일 - 성적게시
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include <string>
#include <algorithm>
#include "STRING.h"

using namespace std;

// function으로 천하통일

// 호출할 수(callable) 있는 것은 함수뿐이 아니다.
// 1. 함수
// 2. 이름없는 함수 람다를 호출할 수 있다.
// 3. 함수를 가리키는 포인터를 호출할 수 있다. 
// 4. ()연산자를 오버로딩한 객체를 호출할 수 있다. - function object, 펑터(functor)(쓰지말자)

// Callable type - 호출가능타입

int main()
{
	int a[]{ 1, 3, 5, 7, 9, 2, 4, 6, 8, 10 };

	class Dog {
	public:
		int operator()(int a, int b) {
			return a < b;
		}
	};
	Dog dog;
	// qsort(a, 10, 4, dog);

	// C++에서 정렬
	
	sort(begin(a), end(a), dog );
		for (int i : a)
			cout << i << ' ';
	save("소스.cpp");
}

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 22일						 월910수78		 (12주 2일)
//-----------------------------------------------------------------------------
// 2023. 12. 11. 월요일(15주 1일) - 한학기 정리, 책소개, 종강
// 2023. 12. 13. 수요일(15주 2일) - 기말시험, 12월 18일 월요일 - 성적게시
//-----------------------------------------------------------------------------
#include <iostream>
#include <random>
#include <string>
#include "save.h"
#include <fstream>
using namespace std;

default_random_engine dre;
uniform_int_distribution< > uid{ 1,100 };

// [문제] "개20마리.txt"에는 class Dog 객체 20개의 정보가 기록되어 있다.
// class Dog {
//		int age;
//		string name;
// 멤버 변수가 있으며
//
//		friend ostream& operator<<( ostream& os, const Dog& dog ) {
//			return os << dog.age << "\t" << dog.name << "\t";
// };
// 연산자 << 를 오버로딩하여 파일에 기록하였다.
//
 //20마리 정보를 읽어 나이오름차순으로 정렬하여 출력하라.

class Dog {
	int age;
	string name;
public:

	// special 함수를 코딩할 이유가 전혀 없다. - 생각해보세요

	int getAge() const {
		return age;
	}

	friend ostream& operator<<(ostream& os, const Dog& dog) {
		return os << dog.age << '\t' << dog.name << '\t';
	}
	friend istream& operator>>(istream& is, Dog& dog) {
		return is >> dog.age >> dog.name;
	}
};
int main()
{
	ifstream in{ "개20마리.txt" };
	if (not in) {
		cout << "파일을 열지 못했다" << '\n';
		return 0;
	}

	Dog dogs[20];

	for (int i = 0; i < 20; ++i)
		in >> dogs[i];

	qsort(dogs, sizeof(dogs) / sizeof(Dog), sizeof(Dog), [](const void* a, const void* b) {
		return ((Dog*)a)->getAge() - ((Dog*)b)->getAge();
	});

	cout << "나이(ascending order)순으로 정렬한 결과" << '\n';

	for (const Dog& dog : dogs)
		cout << dog << '\n';

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-11-22 수요일 오후 5:00:44
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 22일						 월910수78		 (12주 2일)
//-----------------------------------------------------------------------------
// 2023. 12. 11. 월요일(15주 1일) - 한학기 정리, 책소개, 종강
// 2023. 12. 13. 수요일(15주 2일) - 기말시험, 12월 18일 월요일 - 성적게시
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include "STRING.h"

using namespace std;

// 상속 연습 동물 개 새를 상속계층(hierarchy)으로 만들어 본다

class Animal {
	int age;
public:
	void move() const {
		cout << "동물이 움직인다" << '\n';
	}
};

class Dog : public Animal {
	bool bite{ false };
public:
	
};

int main()
{
	Dog dog;

	// [문제] dog의 메모리를 관찰하자. 그림으로?
	cout << "Dog의 메모리 크기 - " << sizeof(Dog) << '\n';

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-11-22 수요일 오후 5:09:53
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 22일						 월910수78		 (12주 2일)
//-----------------------------------------------------------------------------
// 2023. 12. 11. 월요일(15주 1일) - 한학기 정리, 책소개, 종강
// 2023. 12. 13. 수요일(15주 2일) - 기말시험, 12월 18일 월요일 - 성적게시
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include "STRING.h"

using namespace std;

// 상속 연습 동물 개 새를 상속계층(hierarchy)으로 만들어 본다

class Animal {
	int age;
public:
	Animal() {
		cout << "Animal의 기본생성자" << '\n';
	}

	~Animal() {
		cout << "Animal의 소멸자" << '\n';
	}

	void move() const {
		cout << "동물이 움직인다" << '\n';
	}
};

class Dog : public Animal {
	bool bite{ false };

public:
	Dog() {
		cout << "Dog의 기본생성자" << '\n';
	}

	~Dog() {
		cout << "Dog의 소멸자를 누군가가 호출하였다" << '\n';
	}
};

int main()
{
	Dog dog;
	
	dog.move();
	save("소스.cpp");
}

===================================================
저장한 시간: 2023-11-22 수요일 오후 5:11:20
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 22일						 월910수78		 (12주 2일)
//-----------------------------------------------------------------------------
// 2023. 12. 11. 월요일(15주 1일) - 한학기 정리, 책소개, 종강
// 2023. 12. 13. 수요일(15주 2일) - 기말시험, 12월 18일 월요일 - 성적게시
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include "STRING.h"

using namespace std;

// 상속 연습 동물 개 새를 상속계층(hierarchy)으로 만들어 본다

class Animal {
	int age;
public:
	Animal() {
		cout << "Animal의 기본생성자" << '\n';
	}

	~Animal() {
		cout << "Animal의 소멸자" << '\n';
	}

	void move() const {
		cout << "동물이 움직인다" << '\n';
	}
};

class Dog : public Animal {
	bool bite{ false };

public:
	Dog() {
		cout << "Dog의 기본생성자" << '\n';
	}

	Dog(int age) {
		cout << "Dog의 나이 - " << age << '\n';
	}

	~Dog() {
		cout << "Dog의 소멸자를 누군가가 호출하였다" << '\n';
	}
};

int main()
{
	Dog dog{ 10 };
	
	dog.move();
	save("소스.cpp");
}

===================================================
저장한 시간: 2023-11-27 월요일 오후 5:25:33
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 22일						 월910수78		 (13주 1일)
//-----------------------------------------------------------------------------
// 2023. 12. 11. 월요일(15주 1일) - 한학기 정리, 책소개, 종강
// 2023. 12. 13. 수요일(15주 2일) - 기말시험, 12월 18일 월요일 - 성적게시
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include "STRING.h"

using namespace std;

// 상속 연습 동물 개 새를 상속계층(hierarchy)으로 만들어 본다

class Animal {
	int age;
public:
	Animal() {
		cout << "Animal의 기본생성자" << '\n';
	}

	Animal(int n) : age{ n } {

	}

	~Animal() {
		cout << "Animal의 소멸자" << '\n';
	}

	void move() const {
		cout << "동물이 움직인다 - " << age << '\n';
	}
};

class Dog : public Animal {
	bool bite{ false };

public:
	Dog() {
		cout << "Dog의 기본생성자" << '\n';
	}

	Dog(int n) : Animal(n){

	}
	~Dog() {
		cout << "Dog의 소멸자를 누군가가 호출하였다" << '\n';
	}
};

int main()
{
	Dog dog{ 10 };
	
	dog.move();

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-11-27 월요일 오후 5:30:09
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 22일						 월910수78		 (13주 1일)
//-----------------------------------------------------------------------------
// 2023. 12. 11. 월요일(15주 1일) - 한학기 정리, 책소개, 종강
// 2023. 12. 13. 수요일(15주 2일) - 기말시험, 12월 18일 월요일 - 성적게시
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include "STRING.h"

using namespace std;

// 상속 연습 동물 개 새를 상속계층(hierarchy)으로 만들어 본다

class Animal {
	int age;
public:
	Animal() {
		cout << "Animal의 기본생성자" << '\n';
	}

	Animal(int n) : age{ n } {

	}

	~Animal() {
		cout << "Animal의 소멸자" << '\n';
	}

	void move() const {
		cout << "동물이 움직인다 - " << age << '\n';
	}
};

class Dog : public Animal {
	bool bite{ false };			// Dog 클래스에 추가로 불리언 데이터 멤버 bite가 있기 때문에 클래스의 크기는 해당 클래스에 속한 데이터 멤버들의 크기의 합으로 결정됩니다.

public:
	Dog() {
		cout << "Dog의 기본생성자" << '\n';
	}

	Dog(int n) : Animal(n){

	}
	~Dog() {
		cout << "Dog의 소멸자를 누군가가 호출하였다" << '\n';
	}
};

int main()
{
	cout << "부모 Animal의 크기 - " << sizeof Animal << "\n";
	cout << "자식 Dog의 크기 - " << sizeof Dog << '\n';

	// 자식 객체의 메모리 속에는 부모 객체의 메모리가 항상 포함되어 있다.

	Dog dog{ 10 };
	
	dog.move();

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-11-27 월요일 오후 6:09:25
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 22일						 월910수78		 (13주 1일)
//-----------------------------------------------------------------------------
// 2023. 12. 11. 월요일(15주 1일) - 한학기 정리, 책소개, 종강
// 2023. 12. 13. 수요일(15주 2일) - 기말시험, 12월 18일 월요일 - 성적게시
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include "STRING.h"

using namespace std;

// 상속 [연습] 동물 개 새를 상속계층(hierarchy)으로 만들어 본다

class Animal {
public:
	void move() const {
		cout << "동물 - 움직인다" << '\n';
	}
};

class Dog : public Animal {
public:
	void move() const {			// 조상의 멤버를 overriding 하였다
		cout << "개 - 달린다" << '\n';
	}
};

class Bird : public Animal {
public:
	void move() const {
		cout << "새 - 난다" << '\n';
	}
};

int main()
{
	Dog d;
	Bird b;

	d.move();
	b.move();

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-11-27 월요일 오후 6:12:47
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 22일						 월910수78		 (13주 1일)
//-----------------------------------------------------------------------------
// 2023. 12. 11. 월요일(15주 1일) - 한학기 정리, 책소개, 종강
// 2023. 12. 13. 수요일(15주 2일) - 기말시험, 12월 18일 월요일 - 성적게시
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include "STRING.h"

using namespace std;

// 상속 [연습] 동물 개 새를 상속계층(hierarchy)으로 만들어 본다

class Animal {
public:
	void move() const {
		cout << "동물 - 움직인다" << '\n';
	}
};

class Dog : public Animal {
public:
	void move() const {			// 조상의 멤버를 overriding 하였다
		cout << "개 - 달린다" << '\n';
	}
};

class Bird : public Animal {
public:
	void move() const {
		cout << "새 - 난다" << '\n';
	}
};

int main()
{
	Dog d;
	Bird b;

	Animal* p = &d;
	p->move();

	p = &b;
	p->move();

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-11-27 월요일 오후 6:28:18
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 22일						 월910수78		 (13주 1일)
//-----------------------------------------------------------------------------
// 2023. 12. 11. 월요일(15주 1일) - 한학기 정리, 책소개, 종강
// 2023. 12. 13. 수요일(15주 2일) - 기말시험, 12월 18일 월요일 - 성적게시
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include "STRING.h"

using namespace std;

// 상속 [연습] 동물 개 새를 상속계층(hierarchy)으로 만들어 본다

class Animal {
public:
	void move() const {
		cout << "동물 - 움직인다" << '\n';
	}
};

class Dog : public Animal {
public:
	void move() const {			// 조상의 멤버를 overriding 하였다
		cout << "개 - 달린다" << '\n';
	}
};

class Bird : public Animal {
public:
	void move() const {
		cout << "새 - 난다" << '\n';
	}
};

int main()
{
	cout << "Dog의 크기 - " << sizeof Dog << '\n';			// Dog 클래스는 move함수만 오버라이딩한 빈 클래스로 봄. 그래서 1바이트!

	Dog d;
	Bird b;

	Animal* p = &d;
	p->move();

	p = &b;
	p->move();

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-11-27 월요일 오후 6:29:39
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 22일						 월910수78		 (13주 1일)
//-----------------------------------------------------------------------------
// 2023. 12. 11. 월요일(15주 1일) - 한학기 정리, 책소개, 종강
// 2023. 12. 13. 수요일(15주 2일) - 기말시험, 12월 18일 월요일 - 성적게시
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include "STRING.h"

using namespace std;

// 상속 [연습] 동물 개 새를 상속계층(hierarchy)으로 만들어 본다

class Animal {
public:
	virtual void move() const {
		cout << "동물 - 움직인다" << '\n';
	}
};

class Dog : public Animal {
public:
	void move() const {			// 조상의 멤버를 overriding 하였다
		cout << "개 - 달린다" << '\n';
	}
};

class Bird : public Animal {
public:
	void move() const {
		cout << "새 - 난다" << '\n';
	}
};

int main()
{
	// 다형성이라는 유연성을 얻기위해 메모리를 더 사용한다
	// 핵심 키워드는 virtual이다!

	Dog d;
	Bird b;

	Animal* p = &d;
	p->move();

	p = &b;
	p->move();

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-11-27 월요일 오후 6:38:19
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 22일						 월910수78		 (13주 1일)
//-----------------------------------------------------------------------------
// 2023. 12. 11. 월요일(15주 1일) - 한학기 정리, 책소개, 종강
// 2023. 12. 13. 수요일(15주 2일) - 기말시험, 12월 18일 월요일 - 성적게시
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include "STRING.h"

using namespace std;

// 상속 [연습] 동물 개 새를 상속계층(hierarchy)으로 만들어 본다

class Animal {
	int age;
public:
	virtual void move() const {
		cout << "동물 - 움직인다" << '\n';
	}
};

class Dog : public Animal {
	bool bite;
public:
	void move() const {			// 조상의 멤버를 overriding 하였다
		cout << "개 - 달린다" << '\n';
	}
};

class Bird : public Animal {
	char fly;								// 데이터의 정렬 및 패딩
public:
	void move() const {
		cout << "새 - 난다" << '\n';
	}
};

int main()
{
	cout << sizeof Bird << '\n';
	Dog d;
	Bird b;

	Animal* p = &d;
	p->move();

	p = &b;
	p->move();

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-11-27 월요일 오후 6:39:11
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 22일						 월910수78		 (13주 1일)
//-----------------------------------------------------------------------------
// 2023. 12. 11. 월요일(15주 1일) - 한학기 정리, 책소개, 종강
// 2023. 12. 13. 수요일(15주 2일) - 기말시험, 12월 18일 월요일 - 성적게시
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include "STRING.h"

using namespace std;

// 상속 [연습] 동물 개 새를 상속계층(hierarchy)으로 만들어 본다

class Animal {
	int age;
public:
	virtual void move() const {
		cout << "동물 - 움직인다" << '\n';
	}
};

class Dog : public Animal {
	bool bite;
public:
	void move() const {			// 조상의 멤버를 overriding 하였다
		cout << "개 - 달린다" << '\n';
	}
};

class Bird : public Animal {
	long long fly;
public:
	void move() const {
		cout << "새 - 난다" << '\n';
	}
};

int main()
{
	cout << sizeof Dog << '\n';
	Dog d;
	Bird b;

	Animal* p = &d;
	p->move();

	p = &b;
	p->move();

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-11-27 월요일 오후 7:02:02
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 22일						 월910수78		 (13주 1일)
//-----------------------------------------------------------------------------
// 2023. 12. 11. 월요일(15주 1일) - 한학기 정리, 책소개, 종강
// 2023. 12. 13. 수요일(15주 2일) - 기말시험, 12월 18일 월요일 - 성적게시
//-----------------------------------------------------------------------------
#include <iostream>
#include <random>
#include "save.h"
#include "STRING.h"

using namespace std;

// [상속 연습] 동물 개 새를 상속계층(hierarchy)으로 만들어 본다
// C++에서 다형성을 구현하는 핵심키워드 - virtual
// 어떤 클래스가 virtual 멤버를 만들면 자식 클래스의 같은 멤버는 자동으로 virtual이다.

class Animal {
public:
	virtual void move() const {
		cout << "동물 - 움직인다" << '\n';
	}
};

class Dog : public Animal {
public:
	virtual void move() const override {			// 조상의 멤버를 overriding 하였다
		cout << "개 - 달린다" << '\n';
	}
};

class Bird : public Animal {
public:
	virtual void move() const override final {
		cout << "새 - 난다" << '\n';
	}
};

// [문제] 동물 10마리를 관리하는 코드를 만든다
// 랜덤값에 따라 홀수면 Dog, 짝수면 Bird를 생성하라
// 모든 동물의 move()를 호출하여 다형성이 구형됨을 확인하라.

default_random_engine dre;
uniform_int_distribution<> uid{ 0, 1 };

int main()
{
	Animal* animals[10];

	// for (Animal*& p : animals) {
	//
	// }

	for (int i = 0; i < 10; ++i) {
		if (uid(dre))
			animals[i] = new Dog;
		else
			animals[i] = new Bird;
	}

	for (int i = 0; i < 10; ++i)
		animals[i]->move();

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-11-29 수요일 오후 3:44:04
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 29일						 월910수78		 (13주 2일)
//-----------------------------------------------------------------------------
// 2023. 12. 11. 월요일(15주 1일) - 한학기 정리, 책소개, 종강
// 2023. 12. 13. 수요일(15주 2일) - 기말시험, 12월 18일 월요일 - 성적게시
//-----------------------------------------------------------------------------
#include <iostream>
#include <random>
#include "save.h"
#include "STRING.h"

using namespace std;

// [상속 연습] 동물 개 새를 상속계층(hierarchy)으로 만들어 본다
// C++에서 다형성을 구현하는 핵심키워드 - virtual
// 어떤 클래스가 virtual 멤버를 만들면 자식 클래스의 같은 멤버는 자동으로 virtual이다.

class Animal {
public:
	virtual void move() const {
		cout << "동물 - 움직인다" << '\n';
	}
};

class Dog : public Animal {
public:
	virtual void move() const override {			// 조상의 멤버를 overriding 하였다
		cout << "개 - 달린다" << '\n';
	}
};

class Bird : public Animal {
public:
	virtual void move() const override final {
		cout << "새 - 난다" << '\n';
	}
};

// [문제] 동물 10마리를 관리하는 코드를 만든다.(compile할때 숫자를 알 수 있다)
// 랜덤값에 따라 홀수면 Dog, 짝수면 Bird를 생성하라
// 모든 동물의 move()를 호출하여 다형성이 구형됨을 확인하라.

default_random_engine dre;
uniform_int_distribution<> uid{ 0, 1 };

int main()
{
	Animal* animals[10];

	// for (Animal*& p : animals) {
	//
	// }

	for (Animal*& p : animals) {
		if (uid(dre))
			p = new Dog;
		else
			p = new Bird;
	}

	for (Animal* p : animals)
		p->move();

	for (Animal*& p : animals)
		delete p;

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-11-29 수요일 오후 4:03:31
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  11월 29일						 월910수78		 (13주 2일)
//-----------------------------------------------------------------------------
// 2023. 12. 11. 월요일(15주 1일) - 한학기 정리, 책소개, 종강
// 2023. 12. 13. 수요일(15주 2일) - 기말시험, 12월 18일 월요일 - 성적게시
//-----------------------------------------------------------------------------
#include <iostream>
#include <random>
#include "save.h"
#include "STRING.h"

using namespace std;

// [상속 연습] 동물 개 새를 상속계층(hierarchy)으로 만들어 본다
// C++에서 다형성을 구현하는 핵심키워드 - virtual
// 어떤 클래스가 virtual 멤버를 만들면 자식 클래스의 같은 멤버는 자동으로 virtual이다.

class Animal {
public:
	virtual void move() const {
		cout << "동물 - 움직인다" << '\n';
	}
};

class Dog : public Animal {
public:
	virtual void move() const override {			// 조상의 멤버를 overriding 하였다
		cout << "개 - 달린다" << '\n';
	}
};

class Bird : public Animal {
public:
	virtual void move() const override final {
		cout << "새 - 난다" << '\n';
	}
};

// [문제] 동물을 관리하는 코드를 만든다.
// 몇 마리를 관리할 지는 사용자 입력에 따른다.
// 랜덤값에 따라 홀수면 Dog, 짝수면 Bird를 생성하라
// 모든 동물의 move()를 호출하여 다형성이 구형됨을 확인하라.

default_random_engine dre;
uniform_int_distribution<> uid{ 0, 1 };

int main()
{
	cout << "몇 마리를 원하나요?" << '\n';
	int num;
	cin >> num;

	Animal** animals = new Animal* [num];

	for (int i = 0; i < num; ++i) {
		if (uid(dre))
			animals[i] = new Dog;
		else
			animals[i] = new Bird;
	}

	for (int i = 0; i < num; ++i)
		animals[i]->move();

	save("소스.cpp");
}





----------------------------기말범위-------------------------------------------





===================================================
저장한 시간: 2023-12-04 월요일 오후 5:57:39
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  12월 4일						 월910수78		 (14주 1일)
//-----------------------------------------------------------------------------
// 2023. 12. 11. 월요일(15주 1일) - 한학기 정리, 책소개, 종강
// 2023. 12. 13. 수요일(15주 2일) - 기말시험, 12월 18일 월요일 - 성적게시
//-----------------------------------------------------------------------------
#include <iostream>
#include <random>
#include "save.h"
#include "STRING.h"
// 기말시험문제는 다형성이나 상속, 나눠준 소스코드들에서 나옴.
using namespace std;

// C++ 템플릿
// 왜 필요한가?
// 뭐가 좋은가?
// 진짜 좋은 것은 무엇인가?

// [문제] main을 수정하지 말고 의도대로 실행되게 해주세요.

class Dog {
	int num;
public:
	Dog(int n) : num{ n } {};

	friend ostream& operator<<(ostream& os, const Dog& dog) {
		return os << dog.num;
	}
};

void change(int&, int&);
void change(string&, string&);
void change(Dog&, Dog&);

int main()
{
	int a{ 1 }, b{ 2 };
	change(a, b);
	cout << a << ", " << b << '\n';			// 2, 1

	save("소스.cpp");

	{
		string a{ "2023" }, b{ "1204" };
		change(a, b);
		cout << a << ", " << b << '\n';
	}

	{
		Dog a{ 1 }, b{ 2 };
		change(a, b);
		cout << a << ", " << b << '\n';			// 2, 1
	}

	
}
void change(int& a, int& b)
{
	int temp{ a };
	a = b;
	b = temp;
}
void change(string& a, string& b)
{
	string temp{ a };
	a = b;
	b = temp;
}

void change(Dog& a, Dog& b)
{
	Dog temp{ a };			// 컴파일러가 알아서 처리해줌. 메모리를 1대 1로 처리함.
	a = b;		// == a.operator=(b);
	b = temp;
}

===================================================
저장한 시간: 2023-12-04 월요일 오후 6:20:51
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  12월 4일						 월910수78		 (14주 1일)
//-----------------------------------------------------------------------------
// 2023. 12. 11. 월요일(15주 1일) - 한학기 정리, 책소개, 종강
// 2023. 12. 13. 수요일(15주 2일) - 기말시험, 12월 18일 월요일 - 성적게시
//-----------------------------------------------------------------------------
#include <iostream>
#include <random>
#include "save.h"
#include "STRING.h"
// 기말시험문제는 다형성이나 상속, 나눠준 소스코드들에서 나옴.
using namespace std;

// C++ 템플릿
// 왜 필요한가? - C++언어는 함수 오버로딩이 가능하다.(전달인자의 타입만 다르다면)
//		같은 기능의 함수를 자료형만 바꿔 계속 만들어야 한다. -> 컴퓨터가 대신 하도록
//		-> 템플릿 ( 소스 코드를 컴파일러가 생성할 수 있는 틀 )
// 뭐가 좋은가?
// 진짜 좋은 것은 무엇인가?

// [문제] main을 수정하지 말고 의도대로 실행되게 해주세요.

class Dog {
	int num;
public:
	Dog(int n) : num{ n } {};

	friend ostream& operator<<(ostream& os, const Dog& dog) {
		return os << dog.num;
	}
};

// 소스 코드를 찍어낼 수 있도록 틀을 프로그래머가 제공한다

template <class T>		// typename과 class 중 class를 더 많이 사용함.

void change(T& a, T& b)		// int만 다르고 틀이 같음
{
	T temp{ a };
	a = b;
	b = temp;
}

int main()
{
	{
		int a{ 1 }, b{ 2 };
		change<int>(a, b);							// 1. change( int, int);
		// 2. change( int&, int&);
		// 3. change<int>( int, int );

		cout << a << ", " << b << '\n';			// 2, 1
	}
	save("소스.cpp");

	{
		string a{ "2023" }, b{ "1204" };
		change(a, b);
		cout << a << ", " << b << '\n';
	}

	{
		Dog a{ 1 }, b{ 2 };
		change(a, b);
		cout << a << ", " << b << '\n';			// 2, 1
	}
}


===================================================
저장한 시간: 2023-12-04 월요일 오후 6:29:00
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  12월 4일						 월910수78		 (14주 1일)
//-----------------------------------------------------------------------------
// 2023. 12. 11. 월요일(15주 1일) - 한학기 정리, 책소개, 종강
// 2023. 12. 13. 수요일(15주 2일) - 기말시험, 12월 18일 월요일 - 성적게시
//-----------------------------------------------------------------------------
#include <iostream>
#include <random>
#include "save.h"
#include "STRING.h"
// 기말시험문제는 다형성이나 상속, 나눠준 소스코드들에서 나옴.
using namespace std;

// C++ 템플릿
// 왜 필요한가? - C++언어는 함수 오버로딩이 가능하다.(전달인자의 타입만 다르다면)
//		같은 기능의 함수를 자료형만 바꿔 계속 만들어야 한다. -> 컴퓨터가 대신 하도록
//		-> 템플릿 ( 소스 코드를 컴파일러가 생성할 수 있는 틀 )
// 뭐가 좋은가?
// 진짜 좋은 것은 무엇인가?

// [문제] main을 수정하지 말고 의도대로 실행되게 해주세요.

class Dog {
	int num;
public:
	Dog(int n) : num{ n } {};

	friend ostream& operator<<(ostream& os, const Dog& dog) {
		return os << dog.num;
	}
};

// 소스 코드를 찍어낼 수 있도록 틀을 프로그래머가 제공한다
// 템플릿 소스 코드는 자료형에 맞는 소스코드를 찍어내기 때문에 소스코드를 감출 수 없다.
// 템플릿은 반드시 선언과 정의를 동시에 한다.

template <class T>		// typename과 class 중 class를 더 많이 사용함.

void change(T& a, T& b)		// int만 다르고 틀이 같음
{
	T temp{ a };
	a = b;
	b = temp;
}

int main()
{
	{
		int a{ 1 }, b{ 2 };
		change<int>(a, b);							// 1. change( int, int);
													// 2. change( int&, int&);
													// 3. change<int>( int, int );

		cout << a << ", " << b << '\n';				// 2, 1
	}
	save("소스.cpp");

	{
		string a{ "2023" }, b{ "1204" };
		change(a, b);
		cout << a << ", " << b << '\n';
	}

	{
		Dog a{ 1 }, b{ 2 };
		change(a, b);
		cout << a << ", " << b << '\n';			// 2, 1
	}
}


===================================================
저장한 시간: 2023-12-04 월요일 오후 6:48:53
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  12월 4일						 월910수78		 (14주 1일)
//-----------------------------------------------------------------------------
// 2023. 12. 11. 월요일(15주 1일) - 한학기 정리, 책소개, 종강
// 2023. 12. 13. 수요일(15주 2일) - 기말시험, 12월 18일 월요일 - 성적게시
//-----------------------------------------------------------------------------
#include <iostream>
#include <random>
#include "save.h"
#include "STRING.h"
// 기말시험문제는 다형성이나 상속, 나눠준 소스코드들에서 나옴.
using namespace std;

// C++ 템플릿
// 왜 필요한가? - C++언어는 함수 오버로딩이 가능하다.(전달인자의 타입만 다르다면)
//		같은 기능의 함수를 자료형만 바꿔 계속 만들어야 한다. -> 컴퓨터가 대신 하도록
//		-> 템플릿 ( 소스 코드를 컴파일러가 생성할 수 있는 틀 )
// 뭐가 좋은가?
// 진짜 좋은 것은 무엇인가?

// [문제] main을 수정하지 말고 의도대로 실행되게 해주세요.

class Dog {
	int num;
public:
	Dog(int n) : num{ n } {};

	friend ostream& operator<<(ostream& os, const Dog& dog) {
		return os << dog.num;
	}
};

// 소스 코드를 찍어낼 수 있도록 틀을 프로그래머가 제공한다
// 템플릿 소스 코드는 자료형에 맞는 소스코드를 찍어내기 때문에 소스코드를 감출 수 없다.
// 템플릿은 반드시 선언과 정의를 동시에 한다.

template <class T>		// typename과 class 중 class를 더 많이 사용함.
T add(T a, T b)		// int만 다르고 틀이 같음
{
	return a + b;
}

int main()
{
	cout << add(1, 2) << '\n';					// 3
	cout << add<string>("2023", "1204") << '\n';		// 20231204
	//cout << add(Dog{ 1 }, Dog{ 2 }) << '\n';	// 3

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-12-04 월요일 오후 6:54:26
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  12월 4일						 월910수78		 (14주 1일)
//-----------------------------------------------------------------------------
// 2023. 12. 11. 월요일(15주 1일) - 한학기 정리, 책소개, 종강
// 2023. 12. 13. 수요일(15주 2일) - 기말시험, 12월 18일 월요일 - 성적게시
//-----------------------------------------------------------------------------
#include <iostream>
#include <random>
#include "save.h"
#include "STRING.h"
// 기말시험문제는 다형성이나 상속, 나눠준 소스코드들에서 나옴.
using namespace std;

// C++ 템플릿
// 왜 필요한가? - C++언어는 함수 오버로딩이 가능하다.(전달인자의 타입만 다르다면)
//		같은 기능의 함수를 자료형만 바꿔 계속 만들어야 한다. -> 컴퓨터가 대신 하도록
//		-> 템플릿 ( 소스 코드를 컴파일러가 생성할 수 있는 틀 )
// 뭐가 좋은가?
// 진짜 좋은 것은 무엇인가?

// [문제] main을 수정하지 말고 의도대로 실행되게 해주세요.

class Dog {
	int num;
public:
	Dog(int n) : num{ n } {};

	Dog operator+(const Dog& rhs) const {
		return Dog{ num + rhs.num };
	}

	friend ostream& operator<<(ostream& os, const Dog& dog) {
		return os << dog.num;
	}
};

// 소스 코드를 찍어낼 수 있도록 틀을 프로그래머가 제공한다
// 템플릿 소스 코드는 자료형에 맞는 소스코드를 찍어내기 때문에 소스코드를 감출 수 없다.
// 템플릿은 반드시 선언과 정의를 동시에 한다.

template <class T>		// typename과 class 중 class를 더 많이 사용함.
T add(T a, T b)		// int만 다르고 틀이 같음
{
	return a + b;
}

int main()
{
	cout << add(1, 2) << '\n';					// 3
	cout << add<string>("2023", "1204") << '\n';		// 20231204
	cout << add(Dog{ 1 }, Dog{ 2 }) << '\n';	// 3

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-12-06 수요일 오후 3:44:36
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  12월 6일						 월910수78		 (14주 2일)
//-----------------------------------------------------------------------------
// 2023. 12. 11. 월요일(15주 1일) - 한학기 정리, 책소개, 종강
// 2023. 12. 13. 수요일(15주 2일) - 기말시험, 12월 18일 월요일 - 성적게시
//-----------------------------------------------------------------------------
#include <iostream>
#include <algorithm>
#include <random>
#include "save.h"
#include "STRING.h"
// 기말시험문제는 다형성이나 상속, 나눠준 소스코드들에서 나옴.
using namespace std;

// C++ 템플릿
// 무엇인가? - 자료형에 무관한 코딩(함수, 클래스)을 가능하게 해주는 도구
//			- Generic Programming(일반적 프로그래밍)을 가능하게 하는 C++ 핵심 키워드
// 왜 필요한가? - C++언어는 함수 오버로딩이 가능하다.(전달인자의 타입만 다르다면)
//		같은 기능의 함수를 자료형만 바꿔 계속 만들어야 한다. -> 컴퓨터가 대신 하도록
//		-> 템플릿 ( 소스 코드를 컴파일러가 생성할 수 있는 틀 )
// 뭐가 좋은가?
//		소스코드를 생성해주는 점.
// 
// 진짜 좋은 것은 무엇인가?
//		함수를 호출하는 것보다 템플릿으로 만든 함수가 훨씬 빠를 수 있다는 것.

int main()
{
	int a[]{ 1,3,5,7,9,2,4,6,8,10 };

	// 인자 설명은 수요일
	sort<int*>(&a[0], &a[10]);

	for (int n : a)
		cout << n << ' ';
	cout << '\n';

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-12-06 수요일 오후 3:49:39
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  12월 6일						 월910수78		 (14주 2일)
//-----------------------------------------------------------------------------
// 2023. 12. 11. 월요일(15주 1일) - 한학기 정리, 책소개, 종강
// 2023. 12. 13. 수요일(15주 2일) - 기말시험, 12월 18일 월요일 - 성적게시
//-----------------------------------------------------------------------------
#include <iostream>
#include <algorithm>
#include <random>
#include "save.h"
#include "STRING.h"
// 기말시험문제는 다형성이나 상속, 나눠준 소스코드들에서 나옴.
using namespace std;

// C++ 템플릿
// 무엇인가? - 자료형에 무관한 코딩(함수, 클래스)을 가능하게 해주는 도구
//			- Generic Programming(일반적 프로그래밍)을 가능하게 하는 C++ 핵심 키워드
// 왜 필요한가? - C++언어는 함수 오버로딩이 가능하다.(전달인자의 타입만 다르다면)
//		같은 기능의 함수를 자료형만 바꿔 계속 만들어야 한다. -> 컴퓨터가 대신 하도록
//		-> 템플릿 ( 소스 코드를 컴파일러가 생성할 수 있는 틀 )
// 뭐가 좋은가?
//		소스코드를 생성해주는 점.
// 
// 진짜 좋은 것은 무엇인가?
//		함수를 호출하는 것보다 템플릿으로 만든 함수가 훨씬 빠를 수 있다는 것.

int main()
{
	int a[]{ 1,3,5,7,9,2,4,6,8,10 };

	sort<int*>(&a[0], &a[10], [](int a, int b) {
		return a > b;
		});

	for (int n : a)
		cout << n << ' ';
	cout << '\n';

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-12-06 수요일 오후 3:51:35
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  12월 6일						 월910수78		 (14주 2일)
//-----------------------------------------------------------------------------
// 2023. 12. 11. 월요일(15주 1일) - 한학기 정리, 책소개, 종강
// 2023. 12. 13. 수요일(15주 2일) - 기말시험, 12월 18일 월요일 - 성적게시
//-----------------------------------------------------------------------------
#include <iostream>
#include <algorithm>
#include <random>
#include "save.h"
#include "STRING.h"
// 기말시험문제는 다형성이나 상속, 나눠준 소스코드들에서 나옴.
using namespace std;

// C++ 템플릿
// 무엇인가? - 자료형에 무관한 코딩(함수, 클래스)을 가능하게 해주는 도구
//			- Generic Programming(일반적 프로그래밍)을 가능하게 하는 C++ 핵심 키워드
// 왜 필요한가? - C++언어는 함수 오버로딩이 가능하다.(전달인자의 타입만 다르다면)
//		같은 기능의 함수를 자료형만 바꿔 계속 만들어야 한다. -> 컴퓨터가 대신 하도록
//		-> 템플릿 ( 소스 코드를 컴파일러가 생성할 수 있는 틀 )
// 뭐가 좋은가?
//		소스코드를 생성해주는 점.
// 
// 진짜 좋은 것은 무엇인가?
//		함수를 호출하는 것보다 템플릿으로 만든 함수가 훨씬 빠를 수 있다는 것.

bool 내림차순(int a, int b)
{
	return a > b;
}

int main()
{
	int a[]{ 1,3,5,7,9,2,4,6,8,10 };

	sort<int*>(begin(a), end(a), 내림차순);

	for (int n : a)
		cout << n << ' ';
	cout << '\n';

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-12-06 수요일 오후 3:55:52
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  12월 6일						 월910수78		 (14주 2일)
//-----------------------------------------------------------------------------
// 2023. 12. 11. 월요일(15주 1일) - 한학기 정리, 책소개, 종강
// 2023. 12. 13. 수요일(15주 2일) - 기말시험, 12월 18일 월요일 - 성적게시
//-----------------------------------------------------------------------------
#include <iostream>
#include <algorithm>
#include <random>
#include "save.h"
#include "STRING.h"
// 기말시험문제는 다형성이나 상속, 나눠준 소스코드들에서 나옴.
using namespace std;

// C++ 템플릿
// 무엇인가? - 자료형에 무관한 코딩(함수, 클래스)을 가능하게 해주는 도구
//			- Generic Programming(일반적 프로그래밍)을 가능하게 하는 C++ 핵심 키워드
// 왜 필요한가? - C++언어는 함수 오버로딩이 가능하다.(전달인자의 타입만 다르다면)
//		같은 기능의 함수를 자료형만 바꿔 계속 만들어야 한다. -> 컴퓨터가 대신 하도록
//		-> 템플릿 ( 소스 코드를 컴파일러가 생성할 수 있는 틀 )
// 뭐가 좋은가?
//		소스코드를 생성해주는 점.
// 
// 진짜 좋은 것은 무엇인가?
//		함수를 호출하는 것보다 템플릿으로 만든 함수가 훨씬 빠를 수 있다는 것.

bool 내림차순(int a, int b)			// free function, 자유함수, 전역함수...
{
	return a > b;
}

int main()
{
	cout << printf("123-")
	<< '\n';
	int a[]{ 1,3,5,7,9,2,4,6,8,10 };

	sort<int*>(begin(a), end(a), 내림차순);

	for (int n : a)
		cout << n << ' ';
	cout << '\n';

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-12-06 수요일 오후 4:07:16
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  12월 6일						 월910수78		 (14주 2일)
//-----------------------------------------------------------------------------
// 2023. 12. 11. 월요일(15주 1일) - 한학기 정리, 책소개, 종강
// 2023. 12. 13. 수요일(15주 2일) - 기말시험, 12월 18일 월요일 - 성적게시
//-----------------------------------------------------------------------------
#include <iostream>
#include <algorithm>
#include <random>
#include "save.h"
#include "STRING.h"
// 기말시험문제는 다형성이나 상속, 나눠준 소스코드들에서 나옴.
using namespace std;

// C++ 템플릿
// 무엇인가? - 자료형에 무관한 코딩(함수, 클래스)을 가능하게 해주는 도구
//			- Generic Programming(일반적 프로그래밍)을 가능하게 하는 C++ 핵심 키워드
// 왜 필요한가? - C++언어는 함수 오버로딩이 가능하다.(전달인자의 타입만 다르다면)
//		같은 기능의 함수를 자료형만 바꿔 계속 만들어야 한다. -> 컴퓨터가 대신 하도록
//		-> 템플릿 ( 소스 코드를 컴파일러가 생성할 수 있는 틀 )
// 뭐가 좋은가?
//		소스코드를 생성해주는 점.
// 
// 진짜 좋은 것은 무엇인가?
//		함수를 호출하는 것보다 템플릿으로 만든 함수가 훨씬 빠를 수 있다는 것.

int cnt{};

bool inline 내림차순(int a, int b)			// free function, 자유함수, 전역함수...
{
	++cnt;
	return a > b;
}

int main()
{
	int a[]{ 1,3,5,7,9,2,4,6,8,10 };

	sort<int*>(begin(a), end(a), 내림차순);

	cout << "내림차순 호출 횟수 - " << cnt << '\n';

	for (int n : a)
		cout << n << ' ';
	cout << '\n';

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-12-06 수요일 오후 4:08:05
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  12월 6일						 월910수78		 (14주 2일)
//-----------------------------------------------------------------------------
// 2023. 12. 11. 월요일(15주 1일) - 한학기 정리, 책소개, 종강
// 2023. 12. 13. 수요일(15주 2일) - 기말시험, 12월 18일 월요일 - 성적게시
//-----------------------------------------------------------------------------
#include <iostream>
#include <algorithm>
#include <random>
#include "save.h"
#include "STRING.h"
// 기말시험문제는 다형성이나 상속, 나눠준 소스코드들에서 나옴.
using namespace std;

// C++ 템플릿
// 무엇인가? - 자료형에 무관한 코딩(함수, 클래스)을 가능하게 해주는 도구
//			- Generic Programming(일반적 프로그래밍)을 가능하게 하는 C++ 핵심 키워드
// 왜 필요한가? - C++언어는 함수 오버로딩이 가능하다.(전달인자의 타입만 다르다면)
//		같은 기능의 함수를 자료형만 바꿔 계속 만들어야 한다. -> 컴퓨터가 대신 하도록
//		-> 템플릿 ( 소스 코드를 컴파일러가 생성할 수 있는 틀 )
// 뭐가 좋은가?
//		소스코드를 생성해주는 점.
// 
// 진짜 좋은 것은 무엇인가?
//		함수를 호출하는 것보다 템플릿으로 만든 함수가 훨씬 빠를 수 있다는 것.

int cnt{};

bool inline 내림차순(int a, int b)			// free function, 자유함수, 전역함수...
{
	++cnt;
	return a > b;
}

int main()
{
	int a[]{ 10,9,8,7,6,5,4,3,2,1 };

	sort<int*>(begin(a), end(a), 내림차순);

	cout << "내림차순 호출 횟수 - " << cnt << '\n';

	for (int n : a)
		cout << n << ' ';
	cout << '\n';

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-12-06 수요일 오후 4:13:46
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  12월 6일						 월910수78		 (14주 2일)
//-----------------------------------------------------------------------------
// 2023. 12. 11. 월요일(15주 1일) - 한학기 정리, 책소개, 종강
// 2023. 12. 13. 수요일(15주 2일) - 기말시험, 12월 18일 월요일 - 성적게시
//-----------------------------------------------------------------------------
#include <iostream>
#include <algorithm>
#include <random>
#include "save.h"
#include "STRING.h"
// 기말시험문제는 다형성이나 상속, 나눠준 소스코드들에서 나옴.
using namespace std;

// C++ 템플릿
// 무엇인가? - 자료형에 무관한 코딩(함수, 클래스)을 가능하게 해주는 도구
//			- Generic Programming(일반적 프로그래밍)을 가능하게 하는 C++ 핵심 키워드
// 왜 필요한가? - C++언어는 함수 오버로딩이 가능하다.(전달인자의 타입만 다르다면)
//		같은 기능의 함수를 자료형만 바꿔 계속 만들어야 한다. -> 컴퓨터가 대신 하도록
//		-> 템플릿 ( 소스 코드를 컴파일러가 생성할 수 있는 틀 )
// 뭐가 좋은가?
//		소스코드를 생성해주는 점.
// 
// 진짜 좋은 것은 무엇인가?
//		함수를 호출하는 것보다 템플릿으로 만든 함수가 훨씬 빠를 수 있다는 것.
// --> 템플릿으로 코딩한 알고리즘 함수는
//	   전달된 인자에 따라 소스코드를 직접 생성하기 때문에 함수 호출을 하는 대신
//	   함수의 본문을 직접 이용할 수 있다(함수를 inline화)
//     -> 함수 호출에 따른 비용(overhead)이 없으므로 속도가 빠를 수 밖에 없다

int cnt{};

int main()
{
	int a[]{ 10,9,8,7,6,5,4,3,2,1 };

	
	sort(begin(a), end(a), [](int a, int b) {
		return a > b;
		});

	cout << "내림차순 호출 횟수 - " << cnt << '\n';

	for (int n : a)
		cout << n << ' ';
	cout << '\n';

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-12-06 수요일 오후 4:55:55
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  12월 6일						 월910수78		 (14주 2일)
//-----------------------------------------------------------------------------
// 2023. 12. 11. 월요일(15주 1일) - 한학기 정리, 책소개, 종강
// 2023. 12. 13. 수요일(15주 2일) - 기말시험, 12월 18일 월요일 - 성적게시
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include "STRING.h"
// 기말시험문제는 다형성이나 상속, 나눠준 소스코드들에서 나옴.
using namespace std;

// [문제] main()을 수정하지 않고 의도대로 실행되게 하자

template <class T, int NUM>

class Array {
	T a[NUM];
public:
	int size() const {
		return NUM;
	}

	int operator[](int idx) const {
		if (0 <= idx && idx < NUM)
			return a[idx];
		cout << "배열범위위반, 유효범위 0~" << NUM - 1 << '\n';
		return 0;
	}
};

			// 전역 생성하면 

int main()
{
	Array<int, 10> a;

	cout << sizeof(a) << '\n';

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-12-06 수요일 오후 4:57:51
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  12월 6일						 월910수78		 (14주 2일)
//-----------------------------------------------------------------------------
// 2023. 12. 11. 월요일(15주 1일) - 한학기 정리, 책소개, 종강
// 2023. 12. 13. 수요일(15주 2일) - 기말시험, 12월 18일 월요일 - 성적게시
//-----------------------------------------------------------------------------
#include <iostream>
#include "save.h"
#include "STRING.h"
// 기말시험문제는 다형성이나 상속, 나눠준 소스코드들에서 나옴.
using namespace std;

// [문제] main()을 수정하지 않고 의도대로 실행되게 하자

template <class T, int NUM>

class Array {
	T a[NUM];
public:
	int size() const {
		return NUM;
	}

	int operator[](int idx) const {
		if (0 <= idx && idx < NUM)
			return a[idx];
		cout << "배열범위위반, 유효범위 0~" << NUM - 1 << '\n';
		return 0;
	}
};

			// 전역 생성하면 

int main()
{
	Array<int, 10> a;

	a.size();

	cout << "a가 차지하는 메모리 - " << sizeof(a) << '\n';

	cout << "a가 갖고 있는 원소 수 - " << a.size() << '\n';

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-12-06 수요일 오후 4:59:34
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  12월 6일						 월910수78		 (14주 2일)
//-----------------------------------------------------------------------------
// 2023. 12. 11. 월요일(15주 1일) - 한학기 정리, 책소개, 종강
// 2023. 12. 13. 수요일(15주 2일) - 기말시험, 12월 18일 월요일 - 성적게시
//-----------------------------------------------------------------------------
// 기말시험문제는 다형성이나 상속, 나눠준 소스코드들에서 나옴.
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"

using namespace std;

int main()
{
	array<int, 10> a;

	a.size();

	cout << "a가 차지하는 메모리 - " << sizeof(a) << '\n';

	cout << "a가 갖고 있는 원소 수 - " << a.size() << '\n';

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-12-06 수요일 오후 5:01:01
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  12월 6일						 월910수78		 (14주 2일)
//-----------------------------------------------------------------------------
// 2023. 12. 11. 월요일(15주 1일) - 한학기 정리, 책소개, 종강
// 2023. 12. 13. 수요일(15주 2일) - 기말시험, 12월 18일 월요일 - 성적게시
//-----------------------------------------------------------------------------
// 기말시험문제는 다형성이나 상속, 나눠준 소스코드들에서 나옴.
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"

using namespace std;

int main()
{
	array<int, 10> a;

	a.fill(333);

	for (int n : a)
		cout << n << ' ';
	cout << '\n';

	cout << "a가 차지하는 메모리 - " << sizeof(a) << '\n';

	cout << "a가 갖고 있는 원소 수 - " << a.size() << '\n';

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-12-06 수요일 오후 5:03:48
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  12월 6일						 월910수78		 (14주 2일)
//-----------------------------------------------------------------------------
// 2023. 12. 11. 월요일(15주 1일) - 한학기 정리, 책소개, 종강
// 2023. 12. 13. 수요일(15주 2일) - 기말시험, 12월 18일 월요일 - 성적게시
//-----------------------------------------------------------------------------
// 기말시험문제는 다형성이나 상속, 나눠준 소스코드들에서 나옴.
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"

using namespace std;

class Dog {
public:
	Dog() {
		cout << "Dog 생성" << '\n';
	}
	~Dog() {
		cout << "Dog 소멸" << '\n';
	}
};


int main()
{
	Dog* p = new Dog;

	save("소스.cpp");
}

===================================================
저장한 시간: 2023-12-06 수요일 오후 5:04:24
===================================================

//-----------------------------------------------------------------------------
// 2023. 2학기 C++  12월 6일						 월910수78		 (14주 2일)
//-----------------------------------------------------------------------------
// 2023. 12. 11. 월요일(15주 1일) - 한학기 정리, 책소개, 종강
// 2023. 12. 13. 수요일(15주 2일) - 기말시험, 12월 18일 월요일 - 성적게시
//-----------------------------------------------------------------------------
// 기말시험문제는 다형성이나 상속, 나눠준 소스코드들에서 나옴.
#include <iostream>
#include <array>
#include "save.h"
#include "STRING.h"

using namespace std;

class Dog {
public:
	Dog() {
		cout << "Dog 생성" << '\n';
	}
	~Dog() {
		cout << "Dog 소멸" << '\n';
	}
};


int main()
{
	Dog* p = new Dog;

	delete p;

	save("소스.cpp");
}